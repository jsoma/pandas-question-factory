{"datasets": [[{"country": "India", "continent": "Asia", "life_expectancy": 62.1, "population": 1053898000, "gdp": 1736824000000}, {"country": "Iran", "continent": "Asia", "life_expectancy": 69.6, "population": 65342000, "gdp": 561944000000}, {"country": "Venezuela", "continent": "S. America", "life_expectancy": 72.4, "population": 24348000, "gdp": 229702000000}, {"country": "Mexico", "continent": "N. America", "life_expectancy": 74.4, "population": 99960000, "gdp": 1088960000000}, {"country": "Bahrain", "continent": "Asia", "life_expectancy": 74.5, "population": 638000, "gdp": 14050000000}], [{"status": "Implementation", "year": 2016, "country": "Djibouti", "region": "EA", "borrowerCode": null, "borrowerType": null, "borrowerNotGouv": "Government", "financier": "Eximbank", "financeType": "CL", "group": 1.0, "reportedValue": 344, "reportedUnit": "USD", "cleanUSD": 344, "interestRate": "2", "liborRate": null, "repayment": 13.0, "grace": 7.0, "term": "20", "purpose": "Doraleh Multipurpose Port, Damerjog Livestock Port"}, {"status": "Implementation", "year": 2010, "country": "Sudan", "region": null, "borrowerCode": null, "borrowerType": null, "borrowerNotGouv": "Government", "financier": "Eximbank", "financeType": "FA-sub", "group": 1.0, "reportedValue": 233, "reportedUnit": "USD", "cleanUSD": 233, "interestRate": "3", "liborRate": null, "repayment": null, "grace": null, "term": "15", "purpose": "South Kordofan Transmission Lines (Al Fulah Thermal Plant's Tranmission Line?)"}, {"status": "Completed", "year": 2013, "country": "Gabon", "region": "CA", "borrowerCode": null, "borrowerType": null, "borrowerNotGouv": "Government", "financier": "Eximbank", "financeType": "CommL", "group": null, "reportedValue": 493, "reportedUnit": "USD", "cleanUSD": 493, "interestRate": null, "liborRate": null, "repayment": null, "grace": null, "term": null, "purpose": "Port Gentil-Omboue Road and Booue Bridge, 93km, CommL Portion"}, {"status": "Signed", "year": 2007, "country": "Mauritius", "region": "EA", "borrowerCode": null, "borrowerType": null, "borrowerNotGouv": "Government", "financier": "CIDCA", "financeType": "ZIL", "group": 1.0, "reportedValue": 20, "reportedUnit": "CNY", "cleanUSD": 3, "interestRate": "0", "liborRate": null, "repayment": 10.0, "grace": null, "term": null, "purpose": "Economic and Trade cooperation"}, {"status": "Completed", "year": 2018, "country": "Morocco", "region": null, "borrowerCode": null, "borrowerType": null, "borrowerNotGouv": "Government", "financier": "ICBC", "financeType": "CommL", "group": 1.0, "reportedValue": 150, "reportedUnit": "USD", "cleanUSD": 150, "interestRate": null, "liborRate": null, "repayment": null, "grace": null, "term": null, "purpose": "Noor Ouarzazate Solar Power Plant Phase II 200MW"}], [{"Case Number": "ME2017-04083", "Date of Incident": null, "Date of Death": "09/01/2017 12:10:00 PM", "Age": null, "Gender": null, "Race": null, "Latino": false, "Manner of Death": "UNDETERMINED", "Primary Cause": "UNDETERMINED", "Primary Cause Line A": null, "Primary Cause Line B": null, "Primary Cause Line C": null, "Secondary Cause": null, "Gun Related": false, "Opioid Related": false, "Cold Related": false, "Heat Related": false, "Commissioner District": 10.0, "Incident Address": "3600 South Lake Shore Drive", "Incident City": null, "Incident Zip Code": null, "longitude": -87.644, "latitude": 41.949, "location": "(41.948961219631016, -87.64427812003416)", "Residence City": null, "Residence Zip": null, "OBJECTID": 167, "Chicago Ward": 46.0, "Chicago Community Area": "LAKE VIEW"}, {"Case Number": "ME2017-00050", "Date of Incident": "01/03/2017 10:55:00 AM", "Date of Death": "01/03/2017 11:18:00 AM", "Age": 64.0, "Gender": "Male", "Race": "White", "Latino": false, "Manner of Death": "NATURAL", "Primary Cause": "ATHEROSCLEROTIC CARDIOVASCULAR DISEASE", "Primary Cause Line A": null, "Primary Cause Line B": null, "Primary Cause Line C": null, "Secondary Cause": null, "Gun Related": false, "Opioid Related": false, "Cold Related": false, "Heat Related": false, "Commissioner District": 11.0, "Incident Address": "10324 south keating unit 3C", "Incident City": "OAK LAWN", "Incident Zip Code": "60453", "longitude": -87.739, "latitude": 41.704, "location": "(41.7044746873044, -87.73922860759251)", "Residence City": "Oak Lawn", "Residence Zip": 60453.0, "OBJECTID": 3947, "Chicago Ward": null, "Chicago Community Area": null}, {"Case Number": "ME2014-00432", "Date of Incident": "09/08/2014 03:27:00 PM", "Date of Death": "09/08/2014 03:57:00 PM", "Age": 74.0, "Gender": "Male", "Race": "Black", "Latino": false, "Manner of Death": "NATURAL", "Primary Cause": "HYPERTENSIVE AND ARTERIOSCLEROTIC CARDIOVASCULAR DISEASE", "Primary Cause Line A": null, "Primary Cause Line B": null, "Primary Cause Line C": null, "Secondary Cause": null, "Gun Related": false, "Opioid Related": false, "Cold Related": false, "Heat Related": false, "Commissioner District": null, "Incident Address": "5843 S. Peroria", "Incident City": "CHICAGO", "Incident Zip Code": "60624", "longitude": null, "latitude": null, "location": null, "Residence City": "Chicago", "Residence Zip": 60624.0, "OBJECTID": 19123, "Chicago Ward": null, "Chicago Community Area": null}, {"Case Number": "ME2018-01404", "Date of Incident": "03/16/2018 12:26:00 AM", "Date of Death": "03/18/2018 04:34:00 PM", "Age": 57.0, "Gender": "Male", "Race": "Black", "Latino": false, "Manner of Death": "ACCIDENT", "Primary Cause": "INTRACEREBRAL HEMORRHAGE", "Primary Cause Line A": "HYPERTENSIVE CARDIOVASCULAR DISEASE", "Primary Cause Line B": null, "Primary Cause Line C": null, "Secondary Cause": "COCAINE TOXICITY", "Gun Related": false, "Opioid Related": false, "Cold Related": false, "Heat Related": false, "Commissioner District": 4.0, "Incident Address": "7849 South Evans Avenue", "Incident City": "CHICAGO", "Incident Zip Code": "60619", "longitude": -87.606, "latitude": 41.752, "location": "(41.751724413142824, -87.60618989091589)", "Residence City": "Chicago", "Residence Zip": 60620.0, "OBJECTID": 14227, "Chicago Ward": 6.0, "Chicago Community Area": "GREATER GRAND CROSSING"}, {"Case Number": "ME2018-04336", "Date of Incident": "09/13/2018 06:25:00 PM", "Date of Death": "09/13/2018 06:53:00 PM", "Age": 47.0, "Gender": "Male", "Race": "White", "Latino": false, "Manner of Death": "NATURAL", "Primary Cause": "ATHEROSCLEROTIC AND HYPERTENSIVE HEART DISEASE", "Primary Cause Line A": null, "Primary Cause Line B": null, "Primary Cause Line C": null, "Secondary Cause": "OBESITY", "Gun Related": false, "Opioid Related": false, "Cold Related": false, "Heat Related": false, "Commissioner District": 16.0, "Incident Address": "2128 Mannheim Road", "Incident City": "WESTCHESTER", "Incident Zip Code": "60154", "longitude": -87.882, "latitude": 41.85, "location": "(41.84974502058828, -87.88223012598135)", "Residence City": "Western Springs", "Residence Zip": 60558.0, "OBJECTID": 8278, "Chicago Ward": null, "Chicago Community Area": null}], [{"plant_name": "FPL Energy Montezuma Winds LLC", "utility_name": "FPL Energy Montezuma Wind", "sector_name": "IPP Non-CHP", "city": "Birds Landing", "primary_source": "wind", "total_mw": 36.8, "coal_mw": 0.0, "hydro_mw": 0.0}, {"plant_name": "Gaston", "utility_name": "Virginia Electric & Power Co", "sector_name": "Electric Utility", "city": "Roanoke Rapids", "primary_source": "hydroelectric", "total_mw": 220.0, "coal_mw": 0.0, "hydro_mw": 220.0}, {"plant_name": "Garden City", "utility_name": "Sunflower Electric Power Corp", "sector_name": "Electric Utility", "city": "Garden City", "primary_source": "natural gas", "total_mw": 207.3, "coal_mw": 0.0, "hydro_mw": 0.0}, {"plant_name": "Jonesboro City Water & Light Plant", "utility_name": "City Water and Light Plant", "sector_name": "Electric Utility", "city": "Jonesboro", "primary_source": "natural gas", "total_mw": 177.0, "coal_mw": 0.0, "hydro_mw": 0.0}, {"plant_name": "Coyote Springs", "utility_name": "Portland General Electric Co", "sector_name": "Electric Utility", "city": "Boardman", "primary_source": "natural gas", "total_mw": 235.0, "coal_mw": 0.0, "hydro_mw": 0.0}]], "questions": [{"desc": "display all rows  where life_expectancy is greater than 73.36,", "code": "df[df['life_expectancy'] > 73.36]", "difficulty": 1, "dataset_id": 0}, {"desc": "calculate the median of gdp", "code": "df['gdp'].median()", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows  where gdp is less than or equal to 7,566,000,000 and population is less than or equal to 15,989,000 and life_expectancy is less than 71.69,", "code": "df[(df['gdp'] <= 7566000000) & (df['population'] <= 15989000) & (df['life_expectancy'] < 71.69)]", "difficulty": 3, "dataset_id": 0}, {"desc": "display all rows for a dataframe named merged,", "code": "merged", "difficulty": 0, "dataset_id": 0}, {"desc": "display all rows for a dataframe named merged,  where life_expectancy is greater than 63.0,", "code": "merged[merged['life_expectancy'] > 63.0]", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows  where population is equal to 48,892,000,", "code": "df[df['population'] == 48892000]", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows  where gdp is greater than 121,701,880,000.0,", "code": "df[df['gdp'] > 121701880000.0]", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows  where gdp is greater than 33,298,650,000.0,", "code": "df[df['gdp'] > 33298650000.0]", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows  where life_expectancy is less than or equal to 76.8 and gdp is greater than or equal to 9,795,000,000,", "code": "df[(df['life_expectancy'] <= 76.8) & (df['gdp'] >= 9795000000)]", "difficulty": 2, "dataset_id": 0}, {"desc": "for a dataframe named df2,  where life_expectancy is greater than or equal to 78.9, count the frequency of each value of continent", "code": "df2[df2['life_expectancy'] >= 78.9]['continent'].value_counts()", "difficulty": 2, "dataset_id": 0}, {"desc": "display all rows  where gdp is greater than 14,068,780,000.0,", "code": "df[df['gdp'] > 14068780000.0]", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows for a dataframe named df2,", "code": "df2", "difficulty": 0, "dataset_id": 0}, {"desc": "for a dataframe named merged,  where population is less than 4,163,880.0, calculate the sum of gdp", "code": "merged[merged['population'] < 4163880.0]['gdp'].sum()", "difficulty": 2, "dataset_id": 0}, {"desc": "display all rows  where population is greater than or equal to 2,956,000,", "code": "df[df['population'] >= 2956000]", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows  where population is less than or equal to 10,176,000 and life_expectancy is less than 73.1 and gdp is greater than or equal to 14,363,000,000,", "code": "df[(df['population'] <= 10176000) & (df['life_expectancy'] < 73.1) & (df['gdp'] >= 14363000000)]", "difficulty": 3, "dataset_id": 0}, {"desc": "display all rows", "code": "df", "difficulty": 0, "dataset_id": 0}, {"desc": "where life_expectancy is greater than or equal to 54.9, calculate the sum of gdp", "code": "df[df['life_expectancy'] >= 54.9]['gdp'].sum()", "difficulty": 2, "dataset_id": 0}, {"desc": "display all rows for a dataframe named df2,  where population is equal to 4,107,000,", "code": "df2[df2['population'] == 4107000]", "difficulty": 1, "dataset_id": 0}, {"desc": "for a dataframe named df2,  calculate the mean of population", "code": "df2['population'].mean()", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows  where gdp is greater than 15,607,970,000.0,", "code": "df[df['gdp'] > 15607970000.0]", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows  where population is greater than 2,716,440.0,", "code": "df[df['population'] > 2716440.0]", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows", "code": "df", "difficulty": 0, "dataset_id": 0}, {"desc": "display all rows", "code": "df", "difficulty": 0, "dataset_id": 0}, {"desc": "for a dataframe named merged,  where population is equal to 1,371,000, calculate the mean of gdp", "code": "merged[merged['population'] == 1371000]['gdp'].mean()", "difficulty": 2, "dataset_id": 0}, {"desc": "where population is less than 5,349,250.0, calculate the median of gdp", "code": "df[df['population'] < 5349250.0]['gdp'].median()", "difficulty": 2, "dataset_id": 0}, {"desc": "display all rows  where population is less than 12,387,840.0,", "code": "df[df['population'] < 12387840.0]", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows for a dataframe named df2,  where life_expectancy is greater than or equal to 78.5 and gdp is greater than 47,800,200,000.0,", "code": "df2[(df2['life_expectancy'] >= 78.5) & (df2['gdp'] > 47800200000.0)]", "difficulty": 2, "dataset_id": 0}, {"desc": "for a dataframe named df2,  where population is less than or equal to 78,000, count the frequency of each value of continent", "code": "df2[df2['population'] <= 78000]['continent'].value_counts()", "difficulty": 2, "dataset_id": 0}, {"desc": "display all rows  where population is greater than 11,234,440.0,", "code": "df[df['population'] > 11234440.0]", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows for a dataframe named merged,", "code": "merged", "difficulty": 0, "dataset_id": 0}, {"desc": "display all rows for a dataframe named merged,  where population is equal to 31,254,000,", "code": "merged[merged['population'] == 31254000]", "difficulty": 1, "dataset_id": 0}, {"desc": "for a dataframe named df2,  where gdp is equal to 180,900,000,000 and population is greater than or equal to 3,500,000, count the frequency of each value of continent", "code": "df2[(df2['gdp'] == 180900000000) & (df2['population'] >= 3500000)]['continent'].value_counts()", "difficulty": 3, "dataset_id": 0}, {"desc": "display all rows for a dataframe named merged,  where life_expectancy is less than 72.1,", "code": "merged[merged['life_expectancy'] < 72.1]", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows for a dataframe named df2,  where gdp is greater than or equal to 55,299,000,000 and life_expectancy is greater than or equal to 70.1,", "code": "df2[(df2['gdp'] >= 55299000000) & (df2['life_expectancy'] >= 70.1)]", "difficulty": 2, "dataset_id": 0}, {"desc": "for a dataframe named merged,  where population is greater than 9,759,920.0, calculate the mean of life_expectancy", "code": "merged[merged['population'] > 9759920.0]['life_expectancy'].mean()", "difficulty": 2, "dataset_id": 0}, {"desc": "where gdp is equal to 27,838,000,000 and population is less than 6,006,750.0, calculate the mean of life_expectancy", "code": "df[(df['gdp'] == 27838000000) & (df['population'] < 6006750.0)]['life_expectancy'].mean()", "difficulty": 3, "dataset_id": 0}, {"desc": "where life_expectancy is less than or equal to 63.0, count the frequency of each value of continent", "code": "df[df['life_expectancy'] <= 63.0]['continent'].value_counts()", "difficulty": 2, "dataset_id": 0}, {"desc": "display all rows", "code": "df", "difficulty": 0, "dataset_id": 0}, {"desc": "display all rows for a dataframe named df2,  where life_expectancy is less than 68.28 and population is less than or equal to 6,995,000 and gdp is greater than 36,684,150,000.0,", "code": "df2[(df2['life_expectancy'] < 68.28) & (df2['population'] <= 6995000) & (df2['gdp'] > 36684150000.0)]", "difficulty": 3, "dataset_id": 0}, {"desc": "for a dataframe named df2,  where population is less than 19,499,400.0, calculate the sum of life_expectancy", "code": "df2[df2['population'] < 19499400.0]['life_expectancy'].sum()", "difficulty": 2, "dataset_id": 0}, {"desc": "display all rows  where population is less than or equal to 1,241,000,", "code": "df[df['population'] <= 1241000]", "difficulty": 1, "dataset_id": 0}, {"desc": "where life_expectancy is equal to 81.4 and population is greater than or equal to 8,645,000, calculate the median of gdp", "code": "df[(df['life_expectancy'] == 81.4) & (df['population'] >= 8645000)]['gdp'].median()", "difficulty": 3, "dataset_id": 0}, {"desc": "display all rows  where life_expectancy is greater than 69.76,", "code": "df[df['life_expectancy'] > 69.76]", "difficulty": 1, "dataset_id": 0}, {"desc": "for a dataframe named merged,  where population is greater than 4,163,880.0, calculate the mean of life_expectancy", "code": "merged[merged['population'] > 4163880.0]['life_expectancy'].mean()", "difficulty": 2, "dataset_id": 0}, {"desc": "display all rows  where population is greater than 11,844,450.0,", "code": "df[df['population'] > 11844450.0]", "difficulty": 1, "dataset_id": 0}, {"desc": "where population is equal to 23,415,000, calculate the sum of gdp", "code": "df[df['population'] == 23415000]['gdp'].sum()", "difficulty": 2, "dataset_id": 0}, {"desc": "count the frequency of each value of continent", "code": "df['continent'].value_counts()", "difficulty": 1, "dataset_id": 0}, {"desc": "where life_expectancy is greater than or equal to 55.1, calculate the sum of gdp", "code": "df[df['life_expectancy'] >= 55.1]['gdp'].sum()", "difficulty": 2, "dataset_id": 0}, {"desc": "count the frequency of each value of continent (including missing values)", "code": "df['continent'].value_counts(dropna=False)", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows  where gdp is greater than or equal to 21,176,000,000,", "code": "df[df['gdp'] >= 21176000000]", "difficulty": 1, "dataset_id": 0}, {"desc": "for a dataframe named df2,  where population is greater than or equal to 82,349,000 and gdp is less than 145,713,750,000.0, count the frequency of each value of continent (including missing values)", "code": "df2[(df2['population'] >= 82349000) & (df2['gdp'] < 145713750000.0)]['continent'].value_counts(dropna=False)", "difficulty": 3, "dataset_id": 0}, {"desc": "display all rows for a dataframe named merged,  where gdp is greater than or equal to 17,901,000,000 and life_expectancy is greater than or equal to 45.2,", "code": "merged[(merged['gdp'] >= 17901000000) & (merged['life_expectancy'] >= 45.2)]", "difficulty": 2, "dataset_id": 0}, {"desc": "display all rows  where population is equal to 812,000 and life_expectancy is equal to 79.2,", "code": "df[(df['population'] == 812000) & (df['life_expectancy'] == 79.2)]", "difficulty": 2, "dataset_id": 0}, {"desc": "where gdp is less than 30,174,820,000.0, calculate the mean of population", "code": "df[df['gdp'] < 30174820000.0]['population'].mean()", "difficulty": 2, "dataset_id": 0}, {"desc": "display all rows  where gdp is equal to 2,277,000,000 and life_expectancy is equal to 65.3,", "code": "df[(df['gdp'] == 2277000000) & (df['life_expectancy'] == 65.3)]", "difficulty": 2, "dataset_id": 0}, {"desc": "display all rows for a dataframe named merged,  where population is greater than or equal to 58,874,000 and life_expectancy is less than or equal to 70.9,", "code": "merged[(merged['population'] >= 58874000) & (merged['life_expectancy'] <= 70.9)]", "difficulty": 2, "dataset_id": 0}, {"desc": "for a dataframe named df2,  count the frequency of each value of continent (as a percent, including missing values)", "code": "df2['continent'].value_counts(normalize=True, dropna=False)", "difficulty": 1, "dataset_id": 0}, {"desc": "for a dataframe named df2,  where gdp is greater than or equal to 6,519,000,000 and life_expectancy is equal to 70.6, calculate the sum of population", "code": "df2[(df2['gdp'] >= 6519000000) & (df2['life_expectancy'] == 70.6)]['population'].sum()", "difficulty": 3, "dataset_id": 0}, {"desc": "display all rows  where population is less than or equal to 812,000,", "code": "df[df['population'] <= 812000]", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows  where gdp is greater than 69,539,440,000.0,", "code": "df[df['gdp'] > 69539440000.0]", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows  where gdp is equal to 34,064,000,000,", "code": "df[df['gdp'] == 34064000000]", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows for a dataframe named merged,  where life_expectancy is equal to 66.8 and population is less than or equal to 56,986,000 and gdp is less than or equal to 186,000,000,", "code": "merged[(merged['life_expectancy'] == 66.8) & (merged['population'] <= 56986000) & (merged['gdp'] <= 186000000)]", "difficulty": 3, "dataset_id": 0}, {"desc": "display all rows for a dataframe named merged,  where gdp is less than 46,569,440,000.0,", "code": "merged[merged['gdp'] < 46569440000.0]", "difficulty": 1, "dataset_id": 0}, {"desc": "for a dataframe named df2,  where population is greater than 16,445,610.0, calculate the sum of gdp", "code": "df2[df2['population'] > 16445610.0]['gdp'].sum()", "difficulty": 2, "dataset_id": 0}, {"desc": "display all rows for a dataframe named merged,  where population is less than or equal to 123,689,000,", "code": "merged[merged['population'] <= 123689000]", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows  where life_expectancy is greater than 73.84 and population is less than or equal to 1,896,000 and gdp is greater than 24,991,000,000.0,", "code": "df[(df['life_expectancy'] > 73.84) & (df['population'] <= 1896000) & (df['gdp'] > 24991000000.0)]", "difficulty": 3, "dataset_id": 0}, {"desc": "where life_expectancy is less than 70.58 and gdp is greater than 121,701,880,000.0, calculate the mean of population", "code": "df[(df['life_expectancy'] < 70.58) & (df['gdp'] > 121701880000.0)]['population'].mean()", "difficulty": 3, "dataset_id": 0}, {"desc": "display all rows", "code": "df", "difficulty": 0, "dataset_id": 0}, {"desc": "display all rows for a dataframe named df2,  where population is less than or equal to 3,072,000 and life_expectancy is less than or equal to 77.4,", "code": "df2[(df2['population'] <= 3072000) & (df2['life_expectancy'] <= 77.4)]", "difficulty": 2, "dataset_id": 0}, {"desc": "where population is equal to 84,000, count the frequency of each value of continent", "code": "df[df['population'] == 84000]['continent'].value_counts()", "difficulty": 2, "dataset_id": 0}, {"desc": "display all rows  where gdp is less than 33,964,600,000.0 and life_expectancy is equal to 79.9,", "code": "df[(df['gdp'] < 33964600000.0) & (df['life_expectancy'] == 79.9)]", "difficulty": 2, "dataset_id": 0}, {"desc": "display all rows  where gdp is less than 9,729,300,000.0,", "code": "df[df['gdp'] < 9729300000.0]", "difficulty": 1, "dataset_id": 0}, {"desc": "calculate the median of gdp", "code": "df['gdp'].median()", "difficulty": 1, "dataset_id": 0}, {"desc": "for a dataframe named merged,  where life_expectancy is greater than 68.28, count the frequency of each value of continent (including missing values)", "code": "merged[merged['life_expectancy'] > 68.28]['continent'].value_counts(dropna=False)", "difficulty": 2, "dataset_id": 0}, {"desc": "where life_expectancy is less than 63.0 and gdp is greater than or equal to 1,690,893,000,000, count the frequency of each value of continent (as a percent)", "code": "df[(df['life_expectancy'] < 63.0) & (df['gdp'] >= 1690893000000)]['continent'].value_counts(normalize=True)", "difficulty": 3, "dataset_id": 0}, {"desc": "display all rows  where life_expectancy is less than 70.58,", "code": "df[df['life_expectancy'] < 70.58]", "difficulty": 1, "dataset_id": 0}, {"desc": "calculate the median of population", "code": "df['population'].median()", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows for a dataframe named merged,  where life_expectancy is less than 61.04,", "code": "merged[merged['life_expectancy'] < 61.04]", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows for a dataframe named df2,  where gdp is equal to 13,561,000,000 and life_expectancy is less than 63.3 and population is greater than or equal to 38,302,000,", "code": "df2[(df2['gdp'] == 13561000000) & (df2['life_expectancy'] < 63.3) & (df2['population'] >= 38302000)]", "difficulty": 3, "dataset_id": 0}, {"desc": "for a dataframe named merged,  calculate the sum of gdp", "code": "merged['gdp'].sum()", "difficulty": 1, "dataset_id": 0}, {"desc": "for a dataframe named df2,  where gdp is greater than or equal to 140,566,000,000, calculate the sum of life_expectancy", "code": "df2[df2['gdp'] >= 140566000000]['life_expectancy'].sum()", "difficulty": 2, "dataset_id": 0}, {"desc": "display all rows  where gdp is equal to 70,639,000,000,", "code": "df[df['gdp'] == 70639000000]", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows for a dataframe named df2,  where gdp is greater than or equal to 3,590,446,000,000,", "code": "df2[df2['gdp'] >= 3590446000000]", "difficulty": 1, "dataset_id": 0}, {"desc": "calculate the sum of life_expectancy", "code": "df['life_expectancy'].sum()", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows  where population is greater than or equal to 1,292,000 and gdp is equal to 2,142,000,000 and life_expectancy is less than 61.04,", "code": "df[(df['population'] >= 1292000) & (df['gdp'] == 2142000000) & (df['life_expectancy'] < 61.04)]", "difficulty": 3, "dataset_id": 0}, {"desc": "for a dataframe named merged,  where life_expectancy is greater than 70.24, calculate the mean of gdp", "code": "merged[merged['life_expectancy'] > 70.24]['gdp'].mean()", "difficulty": 2, "dataset_id": 0}, {"desc": "display all rows  where gdp is greater than 33,964,600,000.0 and life_expectancy is equal to 70.9,", "code": "df[(df['gdp'] > 33964600000.0) & (df['life_expectancy'] == 70.9)]", "difficulty": 2, "dataset_id": 0}, {"desc": "display all rows  where gdp is greater than or equal to 31,727,000,000 and population is greater than or equal to 6,518,000 and life_expectancy is greater than or equal to 77.0,", "code": "df[(df['gdp'] >= 31727000000) & (df['population'] >= 6518000) & (df['life_expectancy'] >= 77.0)]", "difficulty": 3, "dataset_id": 0}, {"desc": "display all rows", "code": "df", "difficulty": 0, "dataset_id": 0}, {"desc": "display all rows  where population is less than or equal to 4,501,000 and gdp is greater than 21,814,890,000.0 and life_expectancy is equal to 78.2,", "code": "df[(df['population'] <= 4501000) & (df['gdp'] > 21814890000.0) & (df['life_expectancy'] == 78.2)]", "difficulty": 3, "dataset_id": 0}, {"desc": "count the frequency of each value of continent", "code": "df['continent'].value_counts()", "difficulty": 1, "dataset_id": 0}, {"desc": "for a dataframe named df2,  where gdp is greater than 21,143,110,000.0, count the frequency of each value of continent (as a percent)", "code": "df2[df2['gdp'] > 21143110000.0]['continent'].value_counts(normalize=True)", "difficulty": 2, "dataset_id": 0}, {"desc": "for a dataframe named merged,  where life_expectancy is greater than or equal to 76.9 and population is equal to 59,048,000, count the frequency of each value of continent (as a percent, including missing values)", "code": "merged[(merged['life_expectancy'] >= 76.9) & (merged['population'] == 59048000)]['continent'].value_counts(normalize=True, dropna=False)", "difficulty": 3, "dataset_id": 0}, {"desc": "display all rows  where population is greater than 2,339,020.0,", "code": "df[df['population'] > 2339020.0]", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows  where life_expectancy is less than or equal to 62.8 and population is greater than or equal to 3,668,000,", "code": "df[(df['life_expectancy'] <= 62.8) & (df['population'] >= 3668000)]", "difficulty": 2, "dataset_id": 0}, {"desc": "calculate the sum of gdp", "code": "df['gdp'].sum()", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows  where population is greater than or equal to 5,379,000,", "code": "df[df['population'] >= 5379000]", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows", "code": "df", "difficulty": 0, "dataset_id": 0}, {"desc": "display all rows for a dataframe named df2,  where gdp is less than 14,482,040,000.0 and population is less than or equal to 18,745,000,", "code": "df2[(df2['gdp'] < 14482040000.0) & (df2['population'] <= 18745000)]", "difficulty": 2, "dataset_id": 0}, {"desc": "where population is greater than 8,099,430.0, calculate the mean of life_expectancy", "code": "df[df['population'] > 8099430.0]['life_expectancy'].mean()", "difficulty": 2, "dataset_id": 0}, {"desc": "display all rows for a dataframe named merged,  where term is not missing,", "code": "merged[merged['term'].notna()]", "difficulty": 1, "dataset_id": 1}, {"desc": "count the frequency of each value of region for each value of liborRate,", "code": "df.groupby('liborRate')['region'].value_counts()", "difficulty": 2, "dataset_id": 1}, {"desc": "display all rows  where repayment is greater than 10.0 and grace is not missing,", "code": "df[(df['repayment'] > 10.0) & df['grace'].notna()]", "difficulty": 2, "dataset_id": 1}, {"desc": "display all rows  where repayment is not missing and interestRate is not missing,", "code": "df[df['repayment'].notna() & df['interestRate'].notna()]", "difficulty": 2, "dataset_id": 1}, {"desc": "where cleanUSD is greater than 38.0 and grace is not missing, calculate the mean of reportedValue for each value of liborRate,", "code": "df[(df['cleanUSD'] > 38.0) & df['grace'].notna()].groupby('liborRate')['reportedValue'].mean()", "difficulty": 4, "dataset_id": 1}, {"desc": "for a dataframe named merged,  where reportedValue is less than or equal to 38,700, count the frequency of each value of term for each value of liborRate,", "code": "merged[merged['reportedValue'] <= 38700].groupby('liborRate')['term'].value_counts()", "difficulty": 3, "dataset_id": 1}, {"desc": "where grace is equal to 11.5, calculate the sum of reportedValue for each value of liborRate,", "code": "df[df['grace'] == 11.5].groupby('liborRate')['reportedValue'].sum()", "difficulty": 3, "dataset_id": 1}, {"desc": "display all rows  where term is not missing,", "code": "df[df['term'].notna()]", "difficulty": 1, "dataset_id": 1}, {"desc": "where borrowerCode is equal to 3.0, calculate the mean of cleanUSD for each value of liborRate,", "code": "df[df['borrowerCode'] == 3.0].groupby('liborRate')['cleanUSD'].mean()", "difficulty": 3, "dataset_id": 1}, {"desc": "where repayment is not missing, count the frequency of each value of term", "code": "df[df['repayment'].notna()]['term'].value_counts()", "difficulty": 2, "dataset_id": 1}, {"desc": "where year is greater than 2,009.0, calculate the median of cleanUSD", "code": "df[df['year'] > 2009.0]['cleanUSD'].median()", "difficulty": 2, "dataset_id": 1}, {"desc": "where liborRate is not missing, calculate the median of cleanUSD", "code": "df[df['liborRate'].notna()]['cleanUSD'].median()", "difficulty": 2, "dataset_id": 1}, {"desc": "where term is not missing and borrowerCode is less than or equal to 3.0, calculate the median of reportedValue", "code": "df[df['term'].notna() & (df['borrowerCode'] <= 3.0)]['reportedValue'].median()", "difficulty": 3, "dataset_id": 1}, {"desc": "where borrowerCode is greater than 2.78 and borrowerType is not missing, count the frequency of each value of term (as a percent)", "code": "df[(df['borrowerCode'] > 2.78) & df['borrowerType'].notna()]['term'].value_counts(normalize=True)", "difficulty": 3, "dataset_id": 1}, {"desc": "for a dataframe named merged,  where grace is missing, calculate the mean of cleanUSD for each value of liborRate,", "code": "merged[merged['grace'].isna()].groupby('liborRate')['cleanUSD'].mean()", "difficulty": 3, "dataset_id": 1}, {"desc": "where grace is greater than 5.0 and term is not missing, display the top 5 most common values in liborRate", "code": "df[(df['grace'] > 5.0) & df['term'].notna()]['liborRate'].value_counts().head(5)", "difficulty": 3, "dataset_id": 1}, {"desc": "where group is equal to 2.0, calculate the median of reportedValue", "code": "df[df['group'] == 2.0]['reportedValue'].median()", "difficulty": 2, "dataset_id": 1}, {"desc": "display all rows  where borrowerCode is missing,", "code": "df[df['borrowerCode'].isna()]", "difficulty": 1, "dataset_id": 1}, {"desc": "where borrowerType is not missing, display the top 7 most common values in liborRate", "code": "df[df['borrowerType'].notna()]['liborRate'].value_counts().head(7)", "difficulty": 2, "dataset_id": 1}, {"desc": "count the frequency of each value of region", "code": "df['region'].value_counts()", "difficulty": 1, "dataset_id": 1}, {"desc": "display all rows  where repayment is greater than or equal to 5.0,", "code": "df[df['repayment'] >= 5.0]", "difficulty": 1, "dataset_id": 1}, {"desc": "where repayment is less than 10.0, display the top 9 most common values in liborRate", "code": "df[df['repayment'] < 10.0]['liborRate'].value_counts().head(9)", "difficulty": 2, "dataset_id": 1}, {"desc": "display all rows  where repayment is missing,", "code": "df[df['repayment'].isna()]", "difficulty": 1, "dataset_id": 1}, {"desc": "for a dataframe named df2,  where cleanUSD is less than 60.0, count the frequency of each value of region for each value of liborRate,", "code": "df2[df2['cleanUSD'] < 60.0].groupby('liborRate')['region'].value_counts()", "difficulty": 3, "dataset_id": 1}, {"desc": "where borrowerType is not missing, calculate the mean of reportedValue for each value of liborRate,", "code": "df[df['borrowerType'].notna()].groupby('liborRate')['reportedValue'].mean()", "difficulty": 3, "dataset_id": 1}, {"desc": "display all rows  where liborRate is not missing and repayment is less than or equal to 3.0,", "code": "df[df['liborRate'].notna() & (df['repayment'] <= 3.0)]", "difficulty": 2, "dataset_id": 1}, {"desc": "for a dataframe named merged,  where reportedValue is greater than 150.0, calculate the median of cleanUSD", "code": "merged[merged['reportedValue'] > 150.0]['cleanUSD'].median()", "difficulty": 2, "dataset_id": 1}, {"desc": "display all rows for a dataframe named df2,  where grace is not missing and cleanUSD is equal to 115,", "code": "df2[df2['grace'].notna() & (df2['cleanUSD'] == 115)]", "difficulty": 2, "dataset_id": 1}, {"desc": "where group is less than or equal to 1.0, calculate the mean of cleanUSD for each value of liborRate,", "code": "df[df['group'] <= 1.0].groupby('liborRate')['cleanUSD'].mean()", "difficulty": 3, "dataset_id": 1}, {"desc": "where borrowerCode is greater than 2.0, calculate the sum of cleanUSD", "code": "df[df['borrowerCode'] > 2.0]['cleanUSD'].sum()", "difficulty": 2, "dataset_id": 1}, {"desc": "display all rows  where repayment is not missing and grace is not missing,", "code": "df[df['repayment'].notna() & df['grace'].notna()]", "difficulty": 2, "dataset_id": 1}, {"desc": "for a dataframe named df2,  where borrowerType is not missing, calculate the mean of cleanUSD", "code": "df2[df2['borrowerType'].notna()]['cleanUSD'].mean()", "difficulty": 2, "dataset_id": 1}, {"desc": "calculate the mean of cleanUSD", "code": "df['cleanUSD'].mean()", "difficulty": 1, "dataset_id": 1}, {"desc": "where borrowerType is missing and year is greater than or equal to 2,008 and reportedValue is greater than 115.0, count the frequency of each value of borrowerNotGouv for each value of liborRate,", "code": "df[df['borrowerType'].isna() & (df['year'] >= 2008) & (df['reportedValue'] > 115.0)].groupby('liborRate')['borrowerNotGouv'].value_counts()", "difficulty": 5, "dataset_id": 1}, {"desc": "for a dataframe named df2,  where year is greater than or equal to 2,014, calculate the sum of reportedValue", "code": "df2[df2['year'] >= 2014]['reportedValue'].sum()", "difficulty": 2, "dataset_id": 1}, {"desc": "display all rows  where repayment is not missing,", "code": "df[df['repayment'].notna()]", "difficulty": 1, "dataset_id": 1}, {"desc": "where group is equal to 1.0, display the top 9 most common values in liborRate, including missing values", "code": "df[df['group'] == 1.0]['liborRate'].value_counts(dropna=False).head(9)", "difficulty": 2, "dataset_id": 1}, {"desc": "count the frequency of each value of region", "code": "df['region'].value_counts()", "difficulty": 1, "dataset_id": 1}, {"desc": "where term is missing, calculate the median of reportedValue", "code": "df[df['term'].isna()]['reportedValue'].median()", "difficulty": 2, "dataset_id": 1}, {"desc": "where borrowerCode is missing, display the top 10 most common values in liborRate", "code": "df[df['borrowerCode'].isna()]['liborRate'].value_counts().head(10)", "difficulty": 2, "dataset_id": 1}, {"desc": "where borrowerCode is greater than 3.0, calculate the sum of cleanUSD", "code": "df[df['borrowerCode'] > 3.0]['cleanUSD'].sum()", "difficulty": 2, "dataset_id": 1}, {"desc": "where interestRate is not missing, display the top 6 most common values in liborRate for each value of liborRate,", "code": "df[df['interestRate'].notna()].groupby('liborRate')['liborRate'].value_counts().head(6)", "difficulty": 3, "dataset_id": 1}, {"desc": "display all rows  where cleanUSD is less than 85.0,", "code": "df[df['cleanUSD'] < 85.0]", "difficulty": 1, "dataset_id": 1}, {"desc": "for a dataframe named df2,  where interestRate is missing, count the frequency of each value of financier (as a percent)", "code": "df2[df2['interestRate'].isna()]['financier'].value_counts(normalize=True)", "difficulty": 2, "dataset_id": 1}, {"desc": "display all rows  where borrowerCode is less than 3.0 and cleanUSD is equal to 87 and term is missing,", "code": "df[(df['borrowerCode'] < 3.0) & (df['cleanUSD'] == 87) & df['term'].isna()]", "difficulty": 3, "dataset_id": 1}, {"desc": "where reportedValue is equal to 4,434, count the frequency of each value of interestRate for each value of liborRate,", "code": "df[df['reportedValue'] == 4434].groupby('liborRate')['interestRate'].value_counts()", "difficulty": 3, "dataset_id": 1}, {"desc": "display all rows for a dataframe named df2,", "code": "df2", "difficulty": 0, "dataset_id": 1}, {"desc": "display all rows for a dataframe named df2,  where grace is less than 5.0,", "code": "df2[df2['grace'] < 5.0]", "difficulty": 1, "dataset_id": 1}, {"desc": "for a dataframe named df2,  where borrowerType is not missing, calculate the mean of reportedValue for each value of liborRate,", "code": "df2[df2['borrowerType'].notna()].groupby('liborRate')['reportedValue'].mean()", "difficulty": 3, "dataset_id": 1}, {"desc": "display all rows", "code": "df", "difficulty": 0, "dataset_id": 1}, {"desc": "where term is not missing and group is greater than 1.0, display the top 7 most common values in liborRate", "code": "df[df['term'].notna() & (df['group'] > 1.0)]['liborRate'].value_counts().head(7)", "difficulty": 3, "dataset_id": 1}, {"desc": "for a dataframe named merged,  where borrowerCode is greater than or equal to 6.0, display the top 10 most common values in liborRate", "code": "merged[merged['borrowerCode'] >= 6.0]['liborRate'].value_counts().head(10)", "difficulty": 2, "dataset_id": 1}, {"desc": "for a dataframe named merged,  where term is missing and borrowerCode is not missing, calculate the mean of cleanUSD", "code": "merged[merged['term'].isna() & merged['borrowerCode'].notna()]['cleanUSD'].mean()", "difficulty": 3, "dataset_id": 1}, {"desc": "where repayment is not missing, display the top 3 most common values in liborRate", "code": "df[df['repayment'].notna()]['liborRate'].value_counts().head(3)", "difficulty": 2, "dataset_id": 1}, {"desc": "for a dataframe named df2,  calculate the median of reportedValue for each value of liborRate,", "code": "df2.groupby('liborRate')['reportedValue'].median()", "difficulty": 2, "dataset_id": 1}, {"desc": "where group is greater than or equal to 1.0, calculate the sum of reportedValue for each value of liborRate,", "code": "df[df['group'] >= 1.0].groupby('liborRate')['reportedValue'].sum()", "difficulty": 3, "dataset_id": 1}, {"desc": "display all rows  where reportedValue is less than or equal to 5,200,", "code": "df[df['reportedValue'] <= 5200]", "difficulty": 1, "dataset_id": 1}, {"desc": "display all rows  where grace is greater than 5.0,", "code": "df[df['grace'] > 5.0]", "difficulty": 1, "dataset_id": 1}, {"desc": "calculate the mean of reportedValue for each value of liborRate,", "code": "df.groupby('liborRate')['reportedValue'].mean()", "difficulty": 2, "dataset_id": 1}, {"desc": "where interestRate is not missing and grace is not missing, display the top 10 most common values in liborRate, including missing values", "code": "df[df['interestRate'].notna() & df['grace'].notna()]['liborRate'].value_counts(dropna=False).head(10)", "difficulty": 3, "dataset_id": 1}, {"desc": "for a dataframe named df2,  where term is missing and reportedValue is greater than or equal to 389, display the top 4 most common values in liborRate, including missing values", "code": "df2[df2['term'].isna() & (df2['reportedValue'] >= 389)]['liborRate'].value_counts(dropna=False).head(4)", "difficulty": 3, "dataset_id": 1}, {"desc": "display all rows", "code": "df", "difficulty": 0, "dataset_id": 1}, {"desc": "count the frequency of each value of status (as a percent)  for each value of liborRate,", "code": "df.groupby('liborRate')['status'].value_counts(normalize=True)", "difficulty": 2, "dataset_id": 1}, {"desc": "for a dataframe named merged,  where borrowerCode is missing, display the top 7 most common values in liborRate for each value of liborRate,", "code": "merged[merged['borrowerCode'].isna()].groupby('liborRate')['liborRate'].value_counts().head(7)", "difficulty": 3, "dataset_id": 1}, {"desc": "display all rows for a dataframe named merged,", "code": "merged", "difficulty": 0, "dataset_id": 1}, {"desc": "display all rows for a dataframe named df2,  where interestRate is not missing,", "code": "df2[df2['interestRate'].notna()]", "difficulty": 1, "dataset_id": 1}, {"desc": "where borrowerCode is missing and repayment is less than or equal to 25.0 and term is not missing, calculate the median of cleanUSD", "code": "df[df['borrowerCode'].isna() & (df['repayment'] <= 25.0) & df['term'].notna()]['cleanUSD'].median()", "difficulty": 4, "dataset_id": 1}, {"desc": "for a dataframe named df2,  count the frequency of each value of region", "code": "df2['region'].value_counts()", "difficulty": 1, "dataset_id": 1}, {"desc": "display all rows  where borrowerCode is not missing,", "code": "df[df['borrowerCode'].notna()]", "difficulty": 1, "dataset_id": 1}, {"desc": "display all rows  where repayment is missing and group is less than or equal to 1.0,", "code": "df[df['repayment'].isna() & (df['group'] <= 1.0)]", "difficulty": 2, "dataset_id": 1}, {"desc": "where term is missing and grace is missing, calculate the median of cleanUSD for each value of liborRate,", "code": "df[df['term'].isna() & df['grace'].isna()].groupby('liborRate')['cleanUSD'].median()", "difficulty": 4, "dataset_id": 1}, {"desc": "where borrowerType is not missing, count the frequency of each value of financeType (as a percent)", "code": "df[df['borrowerType'].notna()]['financeType'].value_counts(normalize=True)", "difficulty": 2, "dataset_id": 1}, {"desc": "display all rows for a dataframe named df2,", "code": "df2", "difficulty": 0, "dataset_id": 1}, {"desc": "where borrowerType is missing and liborRate is missing and cleanUSD is greater than 99.29, count the frequency of each value of status", "code": "df[df['borrowerType'].isna() & df['liborRate'].isna() & (df['cleanUSD'] > 99.29)]['status'].value_counts()", "difficulty": 4, "dataset_id": 1}, {"desc": "display all rows  where borrowerType is not missing,", "code": "df[df['borrowerType'].notna()]", "difficulty": 1, "dataset_id": 1}, {"desc": "where grace is greater than 5.0, display the top 9 most common values in liborRate", "code": "df[df['grace'] > 5.0]['liborRate'].value_counts().head(9)", "difficulty": 2, "dataset_id": 1}, {"desc": "display all rows  where repayment is not missing and liborRate is missing,", "code": "df[df['repayment'].notna() & df['liborRate'].isna()]", "difficulty": 2, "dataset_id": 1}, {"desc": "for a dataframe named df2,  calculate the mean of reportedValue for each value of liborRate,", "code": "df2.groupby('liborRate')['reportedValue'].mean()", "difficulty": 2, "dataset_id": 1}, {"desc": "where liborRate is not missing, count the frequency of each value of country (including missing values)", "code": "df[df['liborRate'].notna()]['country'].value_counts(dropna=False)", "difficulty": 2, "dataset_id": 1}, {"desc": "display all rows  where borrowerType is not missing and liborRate is not missing,", "code": "df[df['borrowerType'].notna() & df['liborRate'].notna()]", "difficulty": 2, "dataset_id": 1}, {"desc": "where repayment is greater than 10.0, calculate the mean of cleanUSD", "code": "df[df['repayment'] > 10.0]['cleanUSD'].mean()", "difficulty": 2, "dataset_id": 1}, {"desc": "display all rows  where liborRate is missing,", "code": "df[df['liborRate'].isna()]", "difficulty": 1, "dataset_id": 1}, {"desc": "where interestRate is missing, display the top 10 most common values in liborRate for each value of liborRate,", "code": "df[df['interestRate'].isna()].groupby('liborRate')['liborRate'].value_counts().head(10)", "difficulty": 3, "dataset_id": 1}, {"desc": "display all rows for a dataframe named merged,  where reportedValue is greater than 30.0,", "code": "merged[merged['reportedValue'] > 30.0]", "difficulty": 1, "dataset_id": 1}, {"desc": "display all rows", "code": "df", "difficulty": 0, "dataset_id": 1}, {"desc": "where group is greater than or equal to 2.0, calculate the median of cleanUSD for each value of liborRate,", "code": "df[df['group'] >= 2.0].groupby('liborRate')['cleanUSD'].median()", "difficulty": 3, "dataset_id": 1}, {"desc": "where term is missing and cleanUSD is greater than 47.48, calculate the sum of reportedValue for each value of liborRate,", "code": "df[df['term'].isna() & (df['cleanUSD'] > 47.48)].groupby('liborRate')['reportedValue'].sum()", "difficulty": 4, "dataset_id": 1}, {"desc": "where grace is less than or equal to 3.5, display the top 4 most common values in liborRate", "code": "df[df['grace'] <= 3.5]['liborRate'].value_counts().head(4)", "difficulty": 2, "dataset_id": 1}, {"desc": "where interestRate is not missing and term is not missing, count the frequency of each value of reportedUnit (as a percent)", "code": "df[df['interestRate'].notna() & df['term'].notna()]['reportedUnit'].value_counts(normalize=True)", "difficulty": 3, "dataset_id": 1}, {"desc": "for a dataframe named df2,  where cleanUSD is greater than or equal to 143, count the frequency of each value of country", "code": "df2[df2['cleanUSD'] >= 143]['country'].value_counts()", "difficulty": 2, "dataset_id": 1}, {"desc": "where repayment is not missing, count the frequency of each value of financeType", "code": "df[df['repayment'].notna()]['financeType'].value_counts()", "difficulty": 2, "dataset_id": 1}, {"desc": "where repayment is not missing, calculate the mean of reportedValue for each value of liborRate,", "code": "df[df['repayment'].notna()].groupby('liborRate')['reportedValue'].mean()", "difficulty": 3, "dataset_id": 1}, {"desc": "for a dataframe named df2,  where cleanUSD is equal to 350, display the top 6 most common values in liborRate", "code": "df2[df2['cleanUSD'] == 350]['liborRate'].value_counts().head(6)", "difficulty": 2, "dataset_id": 1}, {"desc": "where borrowerCode is not missing and grace is not missing, calculate the sum of cleanUSD for each value of liborRate,", "code": "df[df['borrowerCode'].notna() & df['grace'].notna()].groupby('liborRate')['cleanUSD'].sum()", "difficulty": 4, "dataset_id": 1}, {"desc": "for a dataframe named merged,  where repayment is not missing and grace is not missing and borrowerType is not missing, count the frequency of each value of region (as a percent)", "code": "merged[merged['repayment'].notna() & merged['grace'].notna() & merged['borrowerType'].notna()]['region'].value_counts(normalize=True)", "difficulty": 4, "dataset_id": 1}, {"desc": "display all rows for a dataframe named merged,  where grace is missing and group is equal to 2.0,", "code": "merged[merged['grace'].isna() & (merged['group'] == 2.0)]", "difficulty": 2, "dataset_id": 1}, {"desc": "display all rows  where interestRate is not missing and repayment is equal to 13.0,", "code": "df[df['interestRate'].notna() & (df['repayment'] == 13.0)]", "difficulty": 2, "dataset_id": 1}, {"desc": "display all rows  where year is greater than 2,007.0,", "code": "df[df['year'] > 2007.0]", "difficulty": 1, "dataset_id": 1}, {"desc": "where repayment is less than 10.0 and grace is less than or equal to 8.0 and reportedValue is equal to 88, calculate the median of cleanUSD", "code": "df[(df['repayment'] < 10.0) & (df['grace'] <= 8.0) & (df['reportedValue'] == 88)]['cleanUSD'].median()", "difficulty": 4, "dataset_id": 1}, {"desc": "display all rows  where group is greater than 1.0,", "code": "df[df['group'] > 1.0]", "difficulty": 1, "dataset_id": 1}, {"desc": "for a dataframe named merged,  where longitude is not missing and location is not missing, count the frequency of each value of Gender (as a percent)", "code": "merged[merged['longitude'].notna() & merged['location'].notna()]['Gender'].value_counts(normalize=True)", "difficulty": 3, "dataset_id": 2}, {"desc": "where Secondary Cause is not missing, count the frequency of each value of Gender (as a percent)  for each value of Primary Cause,", "code": "df[df['Secondary Cause'].notna()].groupby('Primary Cause')['Gender'].value_counts(normalize=True)", "difficulty": 3, "dataset_id": 2}, {"desc": "where OBJECTID is greater than or equal to 7,973, display the top 5 most common values in Primary Cause Line B for each value of Secondary Cause,", "code": "df[df['OBJECTID'] >= 7973].groupby('Secondary Cause')['Primary Cause Line B'].value_counts().head(5)", "difficulty": 3, "dataset_id": 2}, {"desc": "where OBJECTID is less than or equal to 17,122, calculate the sum of longitude", "code": "df[df['OBJECTID'] <= 17122]['longitude'].sum()", "difficulty": 2, "dataset_id": 2}, {"desc": "where Chicago Ward is not missing, calculate the sum of Age", "code": "df[df['Chicago Ward'].notna()]['Age'].sum()", "difficulty": 2, "dataset_id": 2}, {"desc": "display the top 3 most common values in Primary Cause Line B", "code": "df['Primary Cause Line B'].value_counts().head(3)", "difficulty": 1, "dataset_id": 2}, {"desc": "display all rows  where Commissioner District is equal to 17.0,", "code": "df[df['Commissioner District'] == 17.0]", "difficulty": 1, "dataset_id": 2}, {"desc": "display all rows  where Secondary Cause is missing,", "code": "df[df['Secondary Cause'].isna()]", "difficulty": 1, "dataset_id": 2}, {"desc": "where OBJECTID is greater than 8,755.84, display the top 5 most common values in Primary Cause Line A, including missing values for each value of Secondary Cause,", "code": "df[df['OBJECTID'] > 8755.84].groupby('Secondary Cause')['Primary Cause Line A'].value_counts(dropna=False).head(5)", "difficulty": 3, "dataset_id": 2}, {"desc": "display all rows  where Age is equal to 69.0,", "code": "df[df['Age'] == 69.0]", "difficulty": 1, "dataset_id": 2}, {"desc": "where location is not missing, count the frequency of each value of Incident City (as a percent)", "code": "df[df['location'].notna()]['Incident City'].value_counts(normalize=True)", "difficulty": 2, "dataset_id": 2}, {"desc": "display all rows for a dataframe named df2,  where longitude is not missing,", "code": "df2[df2['longitude'].notna()]", "difficulty": 1, "dataset_id": 2}, {"desc": "where Residence Zip is less than or equal to 60,428.0 and latitude is equal to 41.725 and longitude is greater than -87.76, calculate the mean of Age for each value of Primary Cause Line A,", "code": "df[(df['Residence Zip'] <= 60428.0) & (df['latitude'] == 41.725) & (df['longitude'] > -87.76)].groupby('Primary Cause Line A')['Age'].mean()", "difficulty": 5, "dataset_id": 2}, {"desc": "display all rows for a dataframe named merged,", "code": "merged", "difficulty": 0, "dataset_id": 2}, {"desc": "for a dataframe named df2,  where Residence Zip is less than or equal to 60,466.0, display the top 4 most common values in Primary Cause Line A", "code": "df2[df2['Residence Zip'] <= 60466.0]['Primary Cause Line A'].value_counts().head(4)", "difficulty": 2, "dataset_id": 2}, {"desc": "where longitude is greater than or equal to -87.669, calculate the mean of Age", "code": "df[df['longitude'] >= -87.669]['Age'].mean()", "difficulty": 2, "dataset_id": 2}, {"desc": "where longitude is missing, count the frequency of each value of Gender (as a percent)", "code": "df[df['longitude'].isna()]['Gender'].value_counts(normalize=True)", "difficulty": 2, "dataset_id": 2}, {"desc": "where location is missing, count the frequency of each value of Manner of Death (as a percent, including missing values)", "code": "df[df['location'].isna()]['Manner of Death'].value_counts(normalize=True, dropna=False)", "difficulty": 2, "dataset_id": 2}, {"desc": "where Primary Cause Line A is not missing, calculate the median of longitude for each value of Secondary Cause,", "code": "df[df['Primary Cause Line A'].notna()].groupby('Secondary Cause')['longitude'].median()", "difficulty": 3, "dataset_id": 2}, {"desc": "display all rows  where Chicago Ward is equal to 20.0,", "code": "df[df['Chicago Ward'] == 20.0]", "difficulty": 1, "dataset_id": 2}, {"desc": "where Commissioner District is not missing, calculate the mean of OBJECTID", "code": "df[df['Commissioner District'].notna()]['OBJECTID'].mean()", "difficulty": 2, "dataset_id": 2}, {"desc": "where location is not missing and Chicago Ward is greater than or equal to 45.0, calculate the median of longitude", "code": "df[df['location'].notna() & (df['Chicago Ward'] >= 45.0)]['longitude'].median()", "difficulty": 3, "dataset_id": 2}, {"desc": "display all rows  where Chicago Community Area is not missing and location is not missing,", "code": "df[df['Chicago Community Area'].notna() & df['location'].notna()]", "difficulty": 2, "dataset_id": 2}, {"desc": "count the frequency of each value of Gender (as a percent)", "code": "df['Gender'].value_counts(normalize=True)", "difficulty": 1, "dataset_id": 2}, {"desc": "for a dataframe named df2,  display the top 5 most common values in Primary Cause Line A", "code": "df2['Primary Cause Line A'].value_counts().head(5)", "difficulty": 1, "dataset_id": 2}, {"desc": "display all rows", "code": "df", "difficulty": 0, "dataset_id": 2}, {"desc": "where longitude is greater than -87.67, display the top 8 most common values in Secondary Cause for each value of Primary Cause,", "code": "df[df['longitude'] > -87.67].groupby('Primary Cause')['Secondary Cause'].value_counts().head(8)", "difficulty": 3, "dataset_id": 2}, {"desc": "display all rows  where longitude is equal to -87.906,", "code": "df[df['longitude'] == -87.906]", "difficulty": 1, "dataset_id": 2}, {"desc": "display all rows for a dataframe named merged,  where Commissioner District is missing,", "code": "merged[merged['Commissioner District'].isna()]", "difficulty": 1, "dataset_id": 2}, {"desc": "where Age is less than or equal to 23.0, display the top 9 most common values in Secondary Cause", "code": "df[df['Age'] <= 23.0]['Secondary Cause'].value_counts().head(9)", "difficulty": 2, "dataset_id": 2}, {"desc": "display all rows for a dataframe named merged,  where longitude is missing,", "code": "merged[merged['longitude'].isna()]", "difficulty": 1, "dataset_id": 2}, {"desc": "for a dataframe named df2,  where Age is greater than or equal to 51.0, calculate the median of latitude for each value of Secondary Cause,", "code": "df2[df2['Age'] >= 51.0].groupby('Secondary Cause')['latitude'].median()", "difficulty": 3, "dataset_id": 2}, {"desc": "display all rows  where longitude is greater than or equal to -87.652 and Chicago Community Area is not missing,", "code": "df[(df['longitude'] >= -87.652) & df['Chicago Community Area'].notna()]", "difficulty": 2, "dataset_id": 2}, {"desc": "display all rows  where Secondary Cause is not missing,", "code": "df[df['Secondary Cause'].notna()]", "difficulty": 1, "dataset_id": 2}, {"desc": "for a dataframe named df2,  where latitude is not missing, calculate the mean of OBJECTID for each value of Primary Cause Line A,", "code": "df2[df2['latitude'].notna()].groupby('Primary Cause Line A')['OBJECTID'].mean()", "difficulty": 3, "dataset_id": 2}, {"desc": "where Residence Zip is equal to 27,502.0, display the top 9 most common values in Primary Cause", "code": "df[df['Residence Zip'] == 27502.0]['Primary Cause'].value_counts().head(9)", "difficulty": 2, "dataset_id": 2}, {"desc": "display all rows  where Secondary Cause is not missing,", "code": "df[df['Secondary Cause'].notna()]", "difficulty": 1, "dataset_id": 2}, {"desc": "where Residence Zip is greater than or equal to 60,465.0 and Age is less than or equal to 4.0, count the frequency of each value of Manner of Death (including missing values)  for each value of Secondary Cause,", "code": "df[(df['Residence Zip'] >= 60465.0) & (df['Age'] <= 4.0)].groupby('Secondary Cause')['Manner of Death'].value_counts(dropna=False)", "difficulty": 4, "dataset_id": 2}, {"desc": "display all rows for a dataframe named merged,  where Chicago Community Area is not missing,", "code": "merged[merged['Chicago Community Area'].notna()]", "difficulty": 1, "dataset_id": 2}, {"desc": "where longitude is greater than -87.72 and Chicago Ward is greater than or equal to 42.0, count the frequency of each value of Gun Related", "code": "df[(df['longitude'] > -87.72) & (df['Chicago Ward'] >= 42.0)]['Gun Related'].value_counts()", "difficulty": 3, "dataset_id": 2}, {"desc": "where longitude is not missing, display the top 4 most common values in Primary Cause Line A for each value of Primary Cause,", "code": "df[df['longitude'].notna()].groupby('Primary Cause')['Primary Cause Line A'].value_counts().head(4)", "difficulty": 3, "dataset_id": 2}, {"desc": "for a dataframe named df2,  where OBJECTID is less than or equal to 8,194 and Commissioner District is equal to 14.0, calculate the mean of latitude", "code": "df2[(df2['OBJECTID'] <= 8194) & (df2['Commissioner District'] == 14.0)]['latitude'].mean()", "difficulty": 3, "dataset_id": 2}, {"desc": "where latitude is less than 41.89, count the frequency of each value of Incident City for each value of Primary Cause,", "code": "df[df['latitude'] < 41.89].groupby('Primary Cause')['Incident City'].value_counts()", "difficulty": 3, "dataset_id": 2}, {"desc": "display all rows for a dataframe named df2,  where Secondary Cause is not missing,", "code": "df2[df2['Secondary Cause'].notna()]", "difficulty": 1, "dataset_id": 2}, {"desc": "where Age is equal to 39.0 and latitude is missing, calculate the median of OBJECTID for each value of Primary Cause,", "code": "df[(df['Age'] == 39.0) & df['latitude'].isna()].groupby('Primary Cause')['OBJECTID'].median()", "difficulty": 4, "dataset_id": 2}, {"desc": "where Residence Zip is greater than or equal to 46,201.0, calculate the mean of longitude for each value of Secondary Cause,", "code": "df[df['Residence Zip'] >= 46201.0].groupby('Secondary Cause')['longitude'].mean()", "difficulty": 3, "dataset_id": 2}, {"desc": "for a dataframe named merged,  where OBJECTID is greater than 7,355.74 and Commissioner District is not missing, display the top 10 most common values in Primary Cause Line B, including missing values for each value of Secondary Cause,", "code": "merged[(merged['OBJECTID'] > 7355.74) & merged['Commissioner District'].notna()].groupby('Secondary Cause')['Primary Cause Line B'].value_counts(dropna=False).head(10)", "difficulty": 4, "dataset_id": 2}, {"desc": "where longitude is less than or equal to -87.987, calculate the mean of Age", "code": "df[df['longitude'] <= -87.987]['Age'].mean()", "difficulty": 2, "dataset_id": 2}, {"desc": "where Residence Zip is less than or equal to 60,419.0, calculate the median of latitude", "code": "df[df['Residence Zip'] <= 60419.0]['latitude'].median()", "difficulty": 2, "dataset_id": 2}, {"desc": "display all rows  where location is not missing and latitude is less than or equal to 41.673,", "code": "df[df['location'].notna() & (df['latitude'] <= 41.673)]", "difficulty": 2, "dataset_id": 2}, {"desc": "for a dataframe named merged,  where OBJECTID is greater than 9,059.44 and Chicago Community Area is not missing, display the top 7 most common values in Secondary Cause, including missing values for each value of Primary Cause Line C,", "code": "merged[(merged['OBJECTID'] > 9059.44) & merged['Chicago Community Area'].notna()].groupby('Primary Cause Line C')['Secondary Cause'].value_counts(dropna=False).head(7)", "difficulty": 4, "dataset_id": 2}, {"desc": "for a dataframe named merged,  count the frequency of each value of Incident Zip Code", "code": "merged['Incident Zip Code'].value_counts()", "difficulty": 1, "dataset_id": 2}, {"desc": "display all rows for a dataframe named df2,  where Chicago Ward is equal to 36.0 and Residence Zip is equal to 60,177.0,", "code": "df2[(df2['Chicago Ward'] == 36.0) & (df2['Residence Zip'] == 60177.0)]", "difficulty": 2, "dataset_id": 2}, {"desc": "where Residence Zip is less than or equal to 60,652.0 and Primary Cause Line A is missing and Chicago Ward is not missing, calculate the median of Age", "code": "df[(df['Residence Zip'] <= 60652.0) & df['Primary Cause Line A'].isna() & df['Chicago Ward'].notna()]['Age'].median()", "difficulty": 4, "dataset_id": 2}, {"desc": "display all rows  where latitude is greater than or equal to 42.041,", "code": "df[df['latitude'] >= 42.041]", "difficulty": 1, "dataset_id": 2}, {"desc": "for a dataframe named df2,  where Chicago Ward is less than 24.0, display the top 7 most common values in Primary Cause Line A", "code": "df2[df2['Chicago Ward'] < 24.0]['Primary Cause Line A'].value_counts().head(7)", "difficulty": 2, "dataset_id": 2}, {"desc": "where OBJECTID is equal to 24,146, display the top 9 most common values in Primary Cause Line A", "code": "df[df['OBJECTID'] == 24146]['Primary Cause Line A'].value_counts().head(9)", "difficulty": 2, "dataset_id": 2}, {"desc": "count the frequency of each value of Manner of Death (as a percent)", "code": "df['Manner of Death'].value_counts(normalize=True)", "difficulty": 1, "dataset_id": 2}, {"desc": "where Commissioner District is greater than or equal to 8.0 and Chicago Ward is greater than or equal to 1.0 and latitude is not missing, calculate the median of longitude", "code": "df[(df['Commissioner District'] >= 8.0) & (df['Chicago Ward'] >= 1.0) & df['latitude'].notna()]['longitude'].median()", "difficulty": 4, "dataset_id": 2}, {"desc": "for a dataframe named df2,  where Residence Zip is greater than 60,189.96, display the top 7 most common values in Secondary Cause", "code": "df2[df2['Residence Zip'] > 60189.96]['Secondary Cause'].value_counts().head(7)", "difficulty": 2, "dataset_id": 2}, {"desc": "display all rows  where Chicago Ward is less than 9.0 and longitude is not missing,", "code": "df[(df['Chicago Ward'] < 9.0) & df['longitude'].notna()]", "difficulty": 2, "dataset_id": 2}, {"desc": "display all rows  where Chicago Ward is equal to 22.0 and Commissioner District is not missing,", "code": "df[(df['Chicago Ward'] == 22.0) & df['Commissioner District'].notna()]", "difficulty": 2, "dataset_id": 2}, {"desc": "display all rows  where Chicago Community Area is not missing,", "code": "df[df['Chicago Community Area'].notna()]", "difficulty": 1, "dataset_id": 2}, {"desc": "display all rows for a dataframe named df2,  where latitude is not missing and Residence Zip is greater than or equal to 46,322.0 and longitude is greater than or equal to -87.596,", "code": "df2[df2['latitude'].notna() & (df2['Residence Zip'] >= 46322.0) & (df2['longitude'] >= -87.596)]", "difficulty": 3, "dataset_id": 2}, {"desc": "display all rows", "code": "df", "difficulty": 0, "dataset_id": 2}, {"desc": "display all rows  where Commissioner District is missing and longitude is missing,", "code": "df[df['Commissioner District'].isna() & df['longitude'].isna()]", "difficulty": 2, "dataset_id": 2}, {"desc": "where Chicago Community Area is not missing, display the top 1 most common values in Primary Cause Line C", "code": "df[df['Chicago Community Area'].notna()]['Primary Cause Line C'].value_counts().head(1)", "difficulty": 2, "dataset_id": 2}, {"desc": "for a dataframe named df2,  where longitude is not missing, display the top 5 most common values in Primary Cause Line A", "code": "df2[df2['longitude'].notna()]['Primary Cause Line A'].value_counts().head(5)", "difficulty": 2, "dataset_id": 2}, {"desc": "where Chicago Ward is greater than 24.0, display the top 9 most common values in Primary Cause Line A", "code": "df[df['Chicago Ward'] > 24.0]['Primary Cause Line A'].value_counts().head(9)", "difficulty": 2, "dataset_id": 2}, {"desc": "where Chicago Community Area is not missing, display the top 1 most common values in Primary Cause Line C", "code": "df[df['Chicago Community Area'].notna()]['Primary Cause Line C'].value_counts().head(1)", "difficulty": 2, "dataset_id": 2}, {"desc": "where Chicago Ward is not missing and longitude is equal to -87.647, calculate the median of Residence Zip for each value of Primary Cause Line C,", "code": "df[df['Chicago Ward'].notna() & (df['longitude'] == -87.647)].groupby('Primary Cause Line C')['Residence Zip'].median()", "difficulty": 4, "dataset_id": 2}, {"desc": "where Chicago Ward is greater than 9.0, calculate the sum of OBJECTID for each value of Secondary Cause,", "code": "df[df['Chicago Ward'] > 9.0].groupby('Secondary Cause')['OBJECTID'].sum()", "difficulty": 3, "dataset_id": 2}, {"desc": "display all rows  where Residence Zip is equal to 60,439.0 and location is not missing,", "code": "df[(df['Residence Zip'] == 60439.0) & df['location'].notna()]", "difficulty": 2, "dataset_id": 2}, {"desc": "where latitude is not missing and location is not missing and Chicago Ward is not missing, display the top 1 most common values in Primary Cause Line C for each value of Primary Cause Line B,", "code": "df[df['latitude'].notna() & df['location'].notna() & df['Chicago Ward'].notna()].groupby('Primary Cause Line B')['Primary Cause Line C'].value_counts().head(1)", "difficulty": 5, "dataset_id": 2}, {"desc": "where Residence Zip is greater than 60,525.0 and location is missing, calculate the sum of OBJECTID", "code": "df[(df['Residence Zip'] > 60525.0) & df['location'].isna()]['OBJECTID'].sum()", "difficulty": 3, "dataset_id": 2}, {"desc": "where Commissioner District is greater than or equal to 14.0 and Chicago Ward is equal to 33.0, calculate the sum of latitude", "code": "df[(df['Commissioner District'] >= 14.0) & (df['Chicago Ward'] == 33.0)]['latitude'].sum()", "difficulty": 3, "dataset_id": 2}, {"desc": "where latitude is not missing, count the frequency of each value of Gender", "code": "df[df['latitude'].notna()]['Gender'].value_counts()", "difficulty": 2, "dataset_id": 2}, {"desc": "display all rows  where location is missing,", "code": "df[df['location'].isna()]", "difficulty": 1, "dataset_id": 2}, {"desc": "display all rows  where Age is less than 67.0,", "code": "df[df['Age'] < 67.0]", "difficulty": 1, "dataset_id": 2}, {"desc": "display all rows", "code": "df", "difficulty": 0, "dataset_id": 2}, {"desc": "where latitude is less than or equal to 41.687, count the frequency of each value of Gender", "code": "df[df['latitude'] <= 41.687]['Gender'].value_counts()", "difficulty": 2, "dataset_id": 2}, {"desc": "display all rows  where Primary Cause Line A is not missing,", "code": "df[df['Primary Cause Line A'].notna()]", "difficulty": 1, "dataset_id": 2}, {"desc": "display all rows", "code": "df", "difficulty": 0, "dataset_id": 2}, {"desc": "display all rows  where Residence Zip is greater than or equal to 60,501.0,", "code": "df[df['Residence Zip'] >= 60501.0]", "difficulty": 1, "dataset_id": 2}, {"desc": "display all rows  where latitude is greater than 41.77,", "code": "df[df['latitude'] > 41.77]", "difficulty": 1, "dataset_id": 2}, {"desc": "for a dataframe named merged,  where longitude is missing, display the top 3 most common values in Primary Cause", "code": "merged[merged['longitude'].isna()]['Primary Cause'].value_counts().head(3)", "difficulty": 2, "dataset_id": 2}, {"desc": "where latitude is missing and Chicago Community Area is missing and Commissioner District is greater than or equal to 10.0, display the top 9 most common values in Primary Cause, including missing values", "code": "df[df['latitude'].isna() & df['Chicago Community Area'].isna() & (df['Commissioner District'] >= 10.0)]['Primary Cause'].value_counts(dropna=False).head(9)", "difficulty": 4, "dataset_id": 2}, {"desc": "where Age is greater than 44.0, calculate the median of Residence Zip", "code": "df[df['Age'] > 44.0]['Residence Zip'].median()", "difficulty": 2, "dataset_id": 2}, {"desc": "for a dataframe named merged,  where latitude is less than 41.89, calculate the median of longitude", "code": "merged[merged['latitude'] < 41.89]['longitude'].median()", "difficulty": 2, "dataset_id": 2}, {"desc": "where longitude is greater than -87.75, display the top 8 most common values in Primary Cause for each value of Secondary Cause,", "code": "df[df['longitude'] > -87.75].groupby('Secondary Cause')['Primary Cause'].value_counts().head(8)", "difficulty": 3, "dataset_id": 2}, {"desc": "where longitude is greater than -87.67 and location is missing, calculate the mean of Residence Zip", "code": "df[(df['longitude'] > -87.67) & df['location'].isna()]['Residence Zip'].mean()", "difficulty": 3, "dataset_id": 2}, {"desc": "where Age is greater than or equal to 77.0 and Chicago Ward is not missing, count the frequency of each value of Incident Zip Code", "code": "df[(df['Age'] >= 77.0) & df['Chicago Ward'].notna()]['Incident Zip Code'].value_counts()", "difficulty": 3, "dataset_id": 2}, {"desc": "display all rows  where Chicago Community Area is not missing and longitude is greater than -87.68,", "code": "df[df['Chicago Community Area'].notna() & (df['longitude'] > -87.68)]", "difficulty": 2, "dataset_id": 2}, {"desc": "display all rows  where location is not missing and OBJECTID is less than or equal to 127,", "code": "df[df['location'].notna() & (df['OBJECTID'] <= 127)]", "difficulty": 2, "dataset_id": 2}, {"desc": "calculate the median of Residence Zip", "code": "df['Residence Zip'].median()", "difficulty": 1, "dataset_id": 2}, {"desc": "display all rows  where Chicago Ward is less than 16.3 and Chicago Community Area is not missing,", "code": "df[(df['Chicago Ward'] < 16.3) & df['Chicago Community Area'].notna()]", "difficulty": 2, "dataset_id": 2}, {"desc": "for a dataframe named df2,  where OBJECTID is equal to 9,014, display the top 5 most common values in Primary Cause, including missing values for each value of Secondary Cause,", "code": "df2[df2['OBJECTID'] == 9014].groupby('Secondary Cause')['Primary Cause'].value_counts(dropna=False).head(5)", "difficulty": 3, "dataset_id": 2}, {"desc": "for a dataframe named df2,  where Chicago Community Area is missing, calculate the mean of Age for each value of Primary Cause Line C,", "code": "df2[df2['Chicago Community Area'].isna()].groupby('Primary Cause Line C')['Age'].mean()", "difficulty": 3, "dataset_id": 2}, {"desc": "where Chicago Ward is missing, display the top 9 most common values in Primary Cause Line A", "code": "df[df['Chicago Ward'].isna()]['Primary Cause Line A'].value_counts().head(9)", "difficulty": 2, "dataset_id": 2}, {"desc": "for a dataframe named merged,  where latitude is greater than 41.87, display the top 3 most common values in Primary Cause for each value of Primary Cause Line A,", "code": "merged[merged['latitude'] > 41.87].groupby('Primary Cause Line A')['Primary Cause'].value_counts().head(3)", "difficulty": 3, "dataset_id": 2}, {"desc": "display all rows for a dataframe named df2,  where hydro_mw is less than or equal to 9.0 and coal_mw is equal to 6.5,", "code": "df2[(df2['hydro_mw'] <= 9.0) & (df2['coal_mw'] == 6.5)]", "difficulty": 2, "dataset_id": 3}, {"desc": "where coal_mw is greater than 0.0, display the top 8 most common values in utility_name for each value of utility_name,", "code": "df[df['coal_mw'] > 0.0].groupby('utility_name')['utility_name'].value_counts().head(8)", "difficulty": 3, "dataset_id": 3}, {"desc": "display all rows  where coal_mw is equal to 107.0 and hydro_mw is equal to 2.6,", "code": "df[(df['coal_mw'] == 107.0) & (df['hydro_mw'] == 2.6)]", "difficulty": 2, "dataset_id": 3}, {"desc": "display all rows  where hydro_mw is equal to 0.4,", "code": "df[df['hydro_mw'] == 0.4]", "difficulty": 1, "dataset_id": 3}, {"desc": "count the frequency of each value of sector_name", "code": "df['sector_name'].value_counts()", "difficulty": 1, "dataset_id": 3}, {"desc": "where coal_mw is greater than or equal to 2,470.0 and total_mw is equal to 2,598.0 and hydro_mw is greater than 0.0, count the frequency of each value of sector_name", "code": "df[(df['coal_mw'] >= 2470.0) & (df['total_mw'] == 2598.0) & (df['hydro_mw'] > 0.0)]['sector_name'].value_counts()", "difficulty": 4, "dataset_id": 3}, {"desc": "for a dataframe named merged,  where hydro_mw is equal to 8.5, calculate the sum of total_mw for each value of utility_name,", "code": "merged[merged['hydro_mw'] == 8.5].groupby('utility_name')['total_mw'].sum()", "difficulty": 3, "dataset_id": 3}, {"desc": "where total_mw is greater than 9.56 and coal_mw is greater than 0.0 and hydro_mw is less than or equal to 2.8, count the frequency of each value of sector_name", "code": "df[(df['total_mw'] > 9.56) & (df['coal_mw'] > 0.0) & (df['hydro_mw'] <= 2.8)]['sector_name'].value_counts()", "difficulty": 4, "dataset_id": 3}, {"desc": "where total_mw is less than 82.26 and hydro_mw is less than 0.0 and coal_mw is greater than or equal to 446.0, display the top 9 most common values in utility_name, including missing values", "code": "df[(df['total_mw'] < 82.26) & (df['hydro_mw'] < 0.0) & (df['coal_mw'] >= 446.0)]['utility_name'].value_counts(dropna=False).head(9)", "difficulty": 4, "dataset_id": 3}, {"desc": "where coal_mw is less than or equal to 1,288.0, calculate the sum of total_mw for each value of utility_name,", "code": "df[df['coal_mw'] <= 1288.0].groupby('utility_name')['total_mw'].sum()", "difficulty": 3, "dataset_id": 3}, {"desc": "where total_mw is less than or equal to 188.0, display the top 10 most common values in utility_name", "code": "df[df['total_mw'] <= 188.0]['utility_name'].value_counts().head(10)", "difficulty": 2, "dataset_id": 3}, {"desc": "display all rows  where hydro_mw is less than or equal to 32.0,", "code": "df[df['hydro_mw'] <= 32.0]", "difficulty": 1, "dataset_id": 3}, {"desc": "display all rows  where total_mw is less than or equal to 7.8 and hydro_mw is less than or equal to 22.8 and coal_mw is less than or equal to 107.0,", "code": "df[(df['total_mw'] <= 7.8) & (df['hydro_mw'] <= 22.8) & (df['coal_mw'] <= 107.0)]", "difficulty": 3, "dataset_id": 3}, {"desc": "where coal_mw is greater than 0.0 and hydro_mw is greater than or equal to 17.9 and total_mw is greater than or equal to 22.5, count the frequency of each value of sector_name", "code": "df[(df['coal_mw'] > 0.0) & (df['hydro_mw'] >= 17.9) & (df['total_mw'] >= 22.5)]['sector_name'].value_counts()", "difficulty": 4, "dataset_id": 3}, {"desc": "for a dataframe named merged,  where total_mw is equal to 92.0 and hydro_mw is less than 0.0, count the frequency of each value of sector_name (as a percent)  for each value of utility_name,", "code": "merged[(merged['total_mw'] == 92.0) & (merged['hydro_mw'] < 0.0)].groupby('utility_name')['sector_name'].value_counts(normalize=True)", "difficulty": 4, "dataset_id": 3}, {"desc": "display all rows  where total_mw is less than or equal to 31.6 and hydro_mw is less than or equal to 11.2 and coal_mw is greater than 0.0,", "code": "df[(df['total_mw'] <= 31.6) & (df['hydro_mw'] <= 11.2) & (df['coal_mw'] > 0.0)]", "difficulty": 3, "dataset_id": 3}, {"desc": "where hydro_mw is less than or equal to 3.8, calculate the median of total_mw", "code": "df[df['hydro_mw'] <= 3.8]['total_mw'].median()", "difficulty": 2, "dataset_id": 3}, {"desc": "where coal_mw is greater than 0.0, calculate the sum of total_mw", "code": "df[df['coal_mw'] > 0.0]['total_mw'].sum()", "difficulty": 2, "dataset_id": 3}, {"desc": "where coal_mw is equal to 23.2, calculate the median of total_mw", "code": "df[df['coal_mw'] == 23.2]['total_mw'].median()", "difficulty": 2, "dataset_id": 3}, {"desc": "for a dataframe named merged,  where total_mw is greater than or equal to 534.0 and coal_mw is equal to 244.0, display the top 5 most common values in utility_name", "code": "merged[(merged['total_mw'] >= 534.0) & (merged['coal_mw'] == 244.0)]['utility_name'].value_counts().head(5)", "difficulty": 3, "dataset_id": 3}, {"desc": "display the top 8 most common values in utility_name", "code": "df['utility_name'].value_counts().head(8)", "difficulty": 1, "dataset_id": 3}, {"desc": "display all rows  where coal_mw is greater than 0.0,", "code": "df[df['coal_mw'] > 0.0]", "difficulty": 1, "dataset_id": 3}, {"desc": "where coal_mw is less than or equal to 2.5 and hydro_mw is less than or equal to 32.4, calculate the median of total_mw for each value of utility_name,", "code": "df[(df['coal_mw'] <= 2.5) & (df['hydro_mw'] <= 32.4)].groupby('utility_name')['total_mw'].median()", "difficulty": 4, "dataset_id": 3}, {"desc": "display all rows  where total_mw is less than or equal to 6.9 and hydro_mw is greater than or equal to 1.0,", "code": "df[(df['total_mw'] <= 6.9) & (df['hydro_mw'] >= 1.0)]", "difficulty": 2, "dataset_id": 3}, {"desc": "where hydro_mw is less than or equal to 6.3, display the top 3 most common values in utility_name", "code": "df[df['hydro_mw'] <= 6.3]['utility_name'].value_counts().head(3)", "difficulty": 2, "dataset_id": 3}, {"desc": "where total_mw is greater than 20.23 and coal_mw is greater than 0.0, display the top 9 most common values in utility_name for each value of utility_name,", "code": "df[(df['total_mw'] > 20.23) & (df['coal_mw'] > 0.0)].groupby('utility_name')['utility_name'].value_counts().head(9)", "difficulty": 4, "dataset_id": 3}, {"desc": "for a dataframe named merged,  where coal_mw is less than or equal to 644.0 and hydro_mw is greater than 0.0, count the frequency of each value of sector_name", "code": "merged[(merged['coal_mw'] <= 644.0) & (merged['hydro_mw'] > 0.0)]['sector_name'].value_counts()", "difficulty": 3, "dataset_id": 3}, {"desc": "display all rows  where hydro_mw is less than 0.0 and total_mw is greater than or equal to 53.4,", "code": "df[(df['hydro_mw'] < 0.0) & (df['total_mw'] >= 53.4)]", "difficulty": 2, "dataset_id": 3}, {"desc": "display all rows  where total_mw is greater than 37.68,", "code": "df[df['total_mw'] > 37.68]", "difficulty": 1, "dataset_id": 3}, {"desc": "display all rows  where coal_mw is less than 0.0,", "code": "df[df['coal_mw'] < 0.0]", "difficulty": 1, "dataset_id": 3}, {"desc": "display all rows for a dataframe named df2,  where coal_mw is less than 0.0,", "code": "df2[df2['coal_mw'] < 0.0]", "difficulty": 1, "dataset_id": 3}, {"desc": "where hydro_mw is less than 0.0, calculate the sum of total_mw", "code": "df[df['hydro_mw'] < 0.0]['total_mw'].sum()", "difficulty": 2, "dataset_id": 3}, {"desc": "display all rows for a dataframe named df2,  where hydro_mw is equal to 603.0 and coal_mw is less than 0.0,", "code": "df2[(df2['hydro_mw'] == 603.0) & (df2['coal_mw'] < 0.0)]", "difficulty": 2, "dataset_id": 3}, {"desc": "where hydro_mw is greater than 0.0, count the frequency of each value of primary_source (including missing values)", "code": "df[df['hydro_mw'] > 0.0]['primary_source'].value_counts(dropna=False)", "difficulty": 2, "dataset_id": 3}, {"desc": "where coal_mw is less than 0.0 and hydro_mw is less than or equal to 128.0, count the frequency of each value of sector_name for each value of utility_name,", "code": "df[(df['coal_mw'] < 0.0) & (df['hydro_mw'] <= 128.0)].groupby('utility_name')['sector_name'].value_counts()", "difficulty": 4, "dataset_id": 3}, {"desc": "where total_mw is greater than 17.5, display the top 5 most common values in utility_name", "code": "df[df['total_mw'] > 17.5]['utility_name'].value_counts().head(5)", "difficulty": 2, "dataset_id": 3}, {"desc": "where hydro_mw is equal to 37.5, calculate the sum of total_mw", "code": "df[df['hydro_mw'] == 37.5]['total_mw'].sum()", "difficulty": 2, "dataset_id": 3}, {"desc": "for a dataframe named merged,  display the top 3 most common values in utility_name", "code": "merged['utility_name'].value_counts().head(3)", "difficulty": 1, "dataset_id": 3}, {"desc": "display all rows  where coal_mw is equal to 1,348.0,", "code": "df[df['coal_mw'] == 1348.0]", "difficulty": 1, "dataset_id": 3}, {"desc": "display all rows  where total_mw is greater than or equal to 1,304.0,", "code": "df[df['total_mw'] >= 1304.0]", "difficulty": 1, "dataset_id": 3}, {"desc": "display all rows  where coal_mw is greater than or equal to 60.0,", "code": "df[df['coal_mw'] >= 60.0]", "difficulty": 1, "dataset_id": 3}, {"desc": "where hydro_mw is less than or equal to 16.0, count the frequency of each value of sector_name (including missing values)", "code": "df[df['hydro_mw'] <= 16.0]['sector_name'].value_counts(dropna=False)", "difficulty": 2, "dataset_id": 3}, {"desc": "where hydro_mw is equal to 3.1 and coal_mw is greater than 0.0 and total_mw is greater than or equal to 410.0, count the frequency of each value of sector_name for each value of utility_name,", "code": "df[(df['hydro_mw'] == 3.1) & (df['coal_mw'] > 0.0) & (df['total_mw'] >= 410.0)].groupby('utility_name')['sector_name'].value_counts()", "difficulty": 5, "dataset_id": 3}, {"desc": "for a dataframe named df2,  where total_mw is less than or equal to 301.6 and hydro_mw is less than 0.0, display the top 4 most common values in utility_name, including missing values", "code": "df2[(df2['total_mw'] <= 301.6) & (df2['hydro_mw'] < 0.0)]['utility_name'].value_counts(dropna=False).head(4)", "difficulty": 3, "dataset_id": 3}, {"desc": "where coal_mw is greater than 0.0 and total_mw is greater than 32.68, display the top 8 most common values in utility_name, including missing values", "code": "df[(df['coal_mw'] > 0.0) & (df['total_mw'] > 32.68)]['utility_name'].value_counts(dropna=False).head(8)", "difficulty": 3, "dataset_id": 3}, {"desc": "display all rows for a dataframe named merged,  where hydro_mw is less than or equal to 62.1,", "code": "merged[merged['hydro_mw'] <= 62.1]", "difficulty": 1, "dataset_id": 3}, {"desc": "display all rows  where hydro_mw is equal to 1.3,", "code": "df[df['hydro_mw'] == 1.3]", "difficulty": 1, "dataset_id": 3}, {"desc": "where hydro_mw is greater than or equal to 11.7 and total_mw is equal to 78.5, count the frequency of each value of primary_source", "code": "df[(df['hydro_mw'] >= 11.7) & (df['total_mw'] == 78.5)]['primary_source'].value_counts()", "difficulty": 3, "dataset_id": 3}, {"desc": "display all rows for a dataframe named df2,  where total_mw is equal to 2,291.0 and hydro_mw is less than or equal to 10.4,", "code": "df2[(df2['total_mw'] == 2291.0) & (df2['hydro_mw'] <= 10.4)]", "difficulty": 2, "dataset_id": 3}, {"desc": "display all rows  where total_mw is greater than or equal to 590.0 and hydro_mw is less than 0.0,", "code": "df[(df['total_mw'] >= 590.0) & (df['hydro_mw'] < 0.0)]", "difficulty": 2, "dataset_id": 3}, {"desc": "display all rows  where coal_mw is less than 0.0,", "code": "df[df['coal_mw'] < 0.0]", "difficulty": 1, "dataset_id": 3}, {"desc": "display all rows  where total_mw is greater than 6.46,", "code": "df[df['total_mw'] > 6.46]", "difficulty": 1, "dataset_id": 3}, {"desc": "for a dataframe named merged,  where hydro_mw is greater than or equal to 4.5 and total_mw is equal to 1,134.0, display the top 5 most common values in utility_name, including missing values", "code": "merged[(merged['hydro_mw'] >= 4.5) & (merged['total_mw'] == 1134.0)]['utility_name'].value_counts(dropna=False).head(5)", "difficulty": 3, "dataset_id": 3}, {"desc": "for a dataframe named df2,  where hydro_mw is less than or equal to 5.6 and coal_mw is less than 0.0, count the frequency of each value of primary_source (as a percent)  for each value of utility_name,", "code": "df2[(df2['hydro_mw'] <= 5.6) & (df2['coal_mw'] < 0.0)].groupby('utility_name')['primary_source'].value_counts(normalize=True)", "difficulty": 4, "dataset_id": 3}, {"desc": "display all rows  where total_mw is greater than 6.0 and hydro_mw is greater than or equal to 117.0 and coal_mw is less than 0.0,", "code": "df[(df['total_mw'] > 6.0) & (df['hydro_mw'] >= 117.0) & (df['coal_mw'] < 0.0)]", "difficulty": 3, "dataset_id": 3}, {"desc": "display all rows for a dataframe named df2,  where total_mw is greater than or equal to 87.4 and coal_mw is greater than 0.0,", "code": "df2[(df2['total_mw'] >= 87.4) & (df2['coal_mw'] > 0.0)]", "difficulty": 2, "dataset_id": 3}, {"desc": "for a dataframe named df2,  where hydro_mw is less than 0.0, calculate the sum of total_mw", "code": "df2[df2['hydro_mw'] < 0.0]['total_mw'].sum()", "difficulty": 2, "dataset_id": 3}, {"desc": "display all rows for a dataframe named df2,  where coal_mw is less than 0.0,", "code": "df2[df2['coal_mw'] < 0.0]", "difficulty": 1, "dataset_id": 3}, {"desc": "for a dataframe named df2,  calculate the sum of total_mw", "code": "df2['total_mw'].sum()", "difficulty": 1, "dataset_id": 3}, {"desc": "display all rows  where hydro_mw is less than 0.0 and total_mw is equal to 745.3,", "code": "df[(df['hydro_mw'] < 0.0) & (df['total_mw'] == 745.3)]", "difficulty": 2, "dataset_id": 3}, {"desc": "display all rows  where hydro_mw is less than 0.0 and coal_mw is greater than 0.0,", "code": "df[(df['hydro_mw'] < 0.0) & (df['coal_mw'] > 0.0)]", "difficulty": 2, "dataset_id": 3}, {"desc": "display all rows", "code": "df", "difficulty": 0, "dataset_id": 3}, {"desc": "for a dataframe named df2,  calculate the sum of total_mw", "code": "df2['total_mw'].sum()", "difficulty": 1, "dataset_id": 3}, {"desc": "for a dataframe named df2,  where hydro_mw is less than 0.0 and coal_mw is less than or equal to 257.0 and total_mw is less than 45.35, count the frequency of each value of sector_name (as a percent, including missing values)", "code": "df2[(df2['hydro_mw'] < 0.0) & (df2['coal_mw'] <= 257.0) & (df2['total_mw'] < 45.35)]['sector_name'].value_counts(normalize=True, dropna=False)", "difficulty": 4, "dataset_id": 3}, {"desc": "calculate the sum of total_mw", "code": "df['total_mw'].sum()", "difficulty": 1, "dataset_id": 3}, {"desc": "where hydro_mw is equal to 4.6, count the frequency of each value of sector_name", "code": "df[df['hydro_mw'] == 4.6]['sector_name'].value_counts()", "difficulty": 2, "dataset_id": 3}, {"desc": "where total_mw is greater than or equal to 767.0, count the frequency of each value of primary_source", "code": "df[df['total_mw'] >= 767.0]['primary_source'].value_counts()", "difficulty": 2, "dataset_id": 3}, {"desc": "where total_mw is less than 44.04, display the top 9 most common values in utility_name", "code": "df[df['total_mw'] < 44.04]['utility_name'].value_counts().head(9)", "difficulty": 2, "dataset_id": 3}, {"desc": "display all rows for a dataframe named df2,  where hydro_mw is greater than or equal to 10.1,", "code": "df2[df2['hydro_mw'] >= 10.1]", "difficulty": 1, "dataset_id": 3}, {"desc": "for a dataframe named merged,  where total_mw is equal to 22.2, count the frequency of each value of primary_source", "code": "merged[merged['total_mw'] == 22.2]['primary_source'].value_counts()", "difficulty": 2, "dataset_id": 3}, {"desc": "where coal_mw is greater than or equal to 212.9, calculate the mean of total_mw", "code": "df[df['coal_mw'] >= 212.9]['total_mw'].mean()", "difficulty": 2, "dataset_id": 3}, {"desc": "display all rows  where coal_mw is less than or equal to 983.0,", "code": "df[df['coal_mw'] <= 983.0]", "difficulty": 1, "dataset_id": 3}, {"desc": "where coal_mw is greater than 0.0 and total_mw is greater than or equal to 844.0 and hydro_mw is less than 0.0, display the top 10 most common values in utility_name", "code": "df[(df['coal_mw'] > 0.0) & (df['total_mw'] >= 844.0) & (df['hydro_mw'] < 0.0)]['utility_name'].value_counts().head(10)", "difficulty": 4, "dataset_id": 3}, {"desc": "where total_mw is less than 4.8, count the frequency of each value of sector_name for each value of utility_name,", "code": "df[df['total_mw'] < 4.8].groupby('utility_name')['sector_name'].value_counts()", "difficulty": 3, "dataset_id": 3}, {"desc": "for a dataframe named merged,  where hydro_mw is less than or equal to 378.0, count the frequency of each value of primary_source (including missing values)", "code": "merged[merged['hydro_mw'] <= 378.0]['primary_source'].value_counts(dropna=False)", "difficulty": 2, "dataset_id": 3}, {"desc": "display all rows  where coal_mw is equal to 53.1,", "code": "df[df['coal_mw'] == 53.1]", "difficulty": 1, "dataset_id": 3}, {"desc": "where coal_mw is equal to 2,250.0 and total_mw is less than 4.3, count the frequency of each value of sector_name", "code": "df[(df['coal_mw'] == 2250.0) & (df['total_mw'] < 4.3)]['sector_name'].value_counts()", "difficulty": 3, "dataset_id": 3}, {"desc": "calculate the mean of total_mw for each value of utility_name,", "code": "df.groupby('utility_name')['total_mw'].mean()", "difficulty": 2, "dataset_id": 3}, {"desc": "where hydro_mw is less than or equal to 3.9 and coal_mw is less than 0.0, calculate the median of total_mw", "code": "df[(df['hydro_mw'] <= 3.9) & (df['coal_mw'] < 0.0)]['total_mw'].median()", "difficulty": 3, "dataset_id": 3}, {"desc": "for a dataframe named df2,  where total_mw is equal to 1,311.0, display the top 6 most common values in utility_name", "code": "df2[df2['total_mw'] == 1311.0]['utility_name'].value_counts().head(6)", "difficulty": 2, "dataset_id": 3}, {"desc": "for a dataframe named merged,  where hydro_mw is greater than or equal to 49.5, count the frequency of each value of sector_name (as a percent)  for each value of utility_name,", "code": "merged[merged['hydro_mw'] >= 49.5].groupby('utility_name')['sector_name'].value_counts(normalize=True)", "difficulty": 3, "dataset_id": 3}, {"desc": "where coal_mw is equal to 23.2, display the top 7 most common values in utility_name for each value of utility_name,", "code": "df[df['coal_mw'] == 23.2].groupby('utility_name')['utility_name'].value_counts().head(7)", "difficulty": 3, "dataset_id": 3}, {"desc": "where hydro_mw is equal to 5.9, count the frequency of each value of primary_source (as a percent)", "code": "df[df['hydro_mw'] == 5.9]['primary_source'].value_counts(normalize=True)", "difficulty": 2, "dataset_id": 3}, {"desc": "for a dataframe named merged,  where hydro_mw is equal to 29.6, count the frequency of each value of primary_source (including missing values)", "code": "merged[merged['hydro_mw'] == 29.6]['primary_source'].value_counts(dropna=False)", "difficulty": 2, "dataset_id": 3}, {"desc": "calculate the sum of total_mw", "code": "df['total_mw'].sum()", "difficulty": 1, "dataset_id": 3}, {"desc": "where total_mw is greater than or equal to 87.0, display the top 3 most common values in utility_name", "code": "df[df['total_mw'] >= 87.0]['utility_name'].value_counts().head(3)", "difficulty": 2, "dataset_id": 3}, {"desc": "where coal_mw is greater than 0.0, count the frequency of each value of sector_name (including missing values)  for each value of utility_name,", "code": "df[df['coal_mw'] > 0.0].groupby('utility_name')['sector_name'].value_counts(dropna=False)", "difficulty": 3, "dataset_id": 3}, {"desc": "count the frequency of each value of primary_source (including missing values)  for each value of utility_name,", "code": "df.groupby('utility_name')['primary_source'].value_counts(dropna=False)", "difficulty": 2, "dataset_id": 3}, {"desc": "for a dataframe named df2,  where total_mw is less than 4.8 and coal_mw is greater than 0.0, display the top 4 most common values in utility_name, including missing values", "code": "df2[(df2['total_mw'] < 4.8) & (df2['coal_mw'] > 0.0)]['utility_name'].value_counts(dropna=False).head(4)", "difficulty": 3, "dataset_id": 3}, {"desc": "display all rows", "code": "df", "difficulty": 0, "dataset_id": 3}, {"desc": "where total_mw is less than 15.0, count the frequency of each value of primary_source", "code": "df[df['total_mw'] < 15.0]['primary_source'].value_counts()", "difficulty": 2, "dataset_id": 3}, {"desc": "for a dataframe named df2,  where hydro_mw is less than or equal to 2.8 and coal_mw is equal to 993.0 and total_mw is greater than 4.9, count the frequency of each value of primary_source", "code": "df2[(df2['hydro_mw'] <= 2.8) & (df2['coal_mw'] == 993.0) & (df2['total_mw'] > 4.9)]['primary_source'].value_counts()", "difficulty": 4, "dataset_id": 3}, {"desc": "for a dataframe named df2,  calculate the median of total_mw", "code": "df2['total_mw'].median()", "difficulty": 1, "dataset_id": 3}, {"desc": "display all rows", "code": "df", "difficulty": 0, "dataset_id": 3}, {"desc": "where coal_mw is greater than 0.0 and total_mw is greater than or equal to 509.0 and hydro_mw is less than 0.0, count the frequency of each value of sector_name (as a percent, including missing values)", "code": "df[(df['coal_mw'] > 0.0) & (df['total_mw'] >= 509.0) & (df['hydro_mw'] < 0.0)]['sector_name'].value_counts(normalize=True, dropna=False)", "difficulty": 4, "dataset_id": 3}, {"desc": "for a dataframe named merged,  where coal_mw is greater than 0.0 and hydro_mw is less than 0.0, display the top 7 most common values in utility_name for each value of utility_name,", "code": "merged[(merged['coal_mw'] > 0.0) & (merged['hydro_mw'] < 0.0)].groupby('utility_name')['utility_name'].value_counts().head(7)", "difficulty": 4, "dataset_id": 3}, {"desc": "where coal_mw is greater than 0.0, count the frequency of each value of sector_name (as a percent)", "code": "df[df['coal_mw'] > 0.0]['sector_name'].value_counts(normalize=True)", "difficulty": 2, "dataset_id": 3}, {"desc": "where coal_mw is less than or equal to 21.0, calculate the sum of total_mw", "code": "df[df['coal_mw'] <= 21.0]['total_mw'].sum()", "difficulty": 2, "dataset_id": 3}, {"desc": "display all rows for a dataframe named merged,  where hydro_mw is greater than 0.0,", "code": "merged[merged['hydro_mw'] > 0.0]", "difficulty": 1, "dataset_id": 3}, {"desc": "display all rows for a dataframe named merged,  where hydro_mw is greater than or equal to 22.5,", "code": "merged[merged['hydro_mw'] >= 22.5]", "difficulty": 1, "dataset_id": 3}]}