{"datasets": [[{"country": "Comoros", "continent": "Africa", "life_expectancy": 57.9, "population": 562000, "gdp": 613000000}, {"country": "Antigua and Barbuda", "continent": "N. America", "life_expectancy": 73.5, "population": 78000, "gdp": 989000000}, {"country": "Niger", "continent": "Africa", "life_expectancy": 50.7, "population": 10922000, "gdp": 6302000000}, {"country": "Bahrain", "continent": "Asia", "life_expectancy": 74.5, "population": 638000, "gdp": 14050000000}, {"country": "Oman", "continent": "Asia", "life_expectancy": 72.1, "population": 2264000, "gdp": 43481000000}], [{"status": "Implementation", "year": 2011, "country": "Angola", "region": "CA", "borrowerCode": null, "borrowerType": null, "borrowerNotGouv": "Government", "financier": "Eximbank", "financeType": "FA-sub", "group": 1.0, "reportedValue": 4400, "reportedUnit": "AOA", "cleanUSD": 46, "interestRate": null, "liborRate": null, "repayment": null, "grace": null, "term": null, "purpose": "Luanda-Soyo Highway, Infrastructure Work for the Nzeto-Soyo Section, Package 7 "}, {"status": "Completed", "year": 2011, "country": "Cameroon", "region": "CA", "borrowerCode": null, "borrowerType": null, "borrowerNotGouv": "Government", "financier": "Eximbank", "financeType": "PEBC", "group": 1.0, "reportedValue": 423, "reportedUnit": "USD", "cleanUSD": 423, "interestRate": "2", "liborRate": null, "repayment": 13.0, "grace": 7.0, "term": "20", "purpose": "Kribi Port Project - Phase I"}, {"status": "Completed", "year": 2012, "country": "Ethiopia", "region": "EA", "borrowerCode": 2.0, "borrowerType": "AfrStateCom", "borrowerNotGouv": "Ethiopia Sugar Corporation (ESC) (SOE)", "financier": "CDB", "financeType": "CommL", "group": 1.0, "reportedValue": 123, "reportedUnit": "USD", "cleanUSD": 123, "interestRate": null, "liborRate": "Libor 6M+2.6", "repayment": 7.0, "grace": 3.0, "term": "10", "purpose": "Kessem Sugar Factory"}, {"status": "Signed", "year": 2014, "country": "Angola", "region": "CA", "borrowerCode": null, "borrowerType": null, "borrowerNotGouv": "Government", "financier": "CDB", "financeType": "MFA-sub", "group": 1.0, "reportedValue": 22, "reportedUnit": "USD", "cleanUSD": 17, "interestRate": null, "liborRate": null, "repayment": null, "grace": null, "term": null, "purpose": "Construction of Integrated Infrastructure, Vila do Soyo, Phase 1 Stage 2"}, {"status": "Completed", "year": 2003, "country": "Sudan", "region": null, "borrowerCode": null, "borrowerType": null, "borrowerNotGouv": "Government", "financier": "Eximbank", "financeType": "Loan", "group": 1.0, "reportedValue": 381, "reportedUnit": "USD", "cleanUSD": 381, "interestRate": null, "liborRate": null, "repayment": null, "grace": null, "term": null, "purpose": "Merowe Hydropower Project transmission lines and substations"}], [{"Case Number": "ME2016-05442", "Date of Incident": "11/12/2016 01:55:00 PM", "Date of Death": "11/12/2016 02:13:00 PM", "Age": 79.0, "Gender": "Female", "Race": "Black", "Latino": false, "Manner of Death": "NATURAL", "Primary Cause": "ORGANIC CARDIOVASCULAR DISEASE", "Primary Cause Line A": null, "Primary Cause Line B": null, "Primary Cause Line C": null, "Secondary Cause": "DEMENTIA", "Gun Related": false, "Opioid Related": false, "Cold Related": false, "Heat Related": false, "Commissioner District": 6.0, "Incident Address": "4 APPLE LANE", "Incident City": "PARK FOREST", "Incident Zip Code": "60466", "longitude": -87.675, "latitude": 41.475, "location": "(41.47542938802632, -87.67474203175605)", "Residence City": "Park Forest", "Residence Zip": 60466.0, "OBJECTID": 10685, "Chicago Ward": null, "Chicago Community Area": null}, {"Case Number": "ME2015-03439", "Date of Incident": "08/12/2015 03:38:00 PM", "Date of Death": "08/12/2015 04:15:00 PM", "Age": 75.0, "Gender": "Male", "Race": "White", "Latino": false, "Manner of Death": "NATURAL", "Primary Cause": "HYPERTENSIVE ARTERIOSCLEROTIC CARDIOVASCULAR DISEASE", "Primary Cause Line A": null, "Primary Cause Line B": null, "Primary Cause Line C": null, "Secondary Cause": null, "Gun Related": false, "Opioid Related": false, "Cold Related": false, "Heat Related": false, "Commissioner District": 5.0, "Incident Address": "14110 DEARBORN", "Incident City": "RIVERDALE", "Incident Zip Code": "60827", "longitude": -87.624, "latitude": 41.638, "location": "(41.63837841141816, -87.62352157355492)", "Residence City": "Grant Park", "Residence Zip": 60940.0, "OBJECTID": 3148, "Chicago Ward": null, "Chicago Community Area": null}, {"Case Number": "ME2016-06082", "Date of Incident": "12/18/2016 12:00:00 AM", "Date of Death": "12/18/2016 11:39:00 AM", "Age": 73.0, "Gender": "Male", "Race": "White", "Latino": false, "Manner of Death": "NATURAL", "Primary Cause": "ORGANIC CARDIOVASCULAR DISEASE", "Primary Cause Line A": null, "Primary Cause Line B": null, "Primary Cause Line C": null, "Secondary Cause": null, "Gun Related": false, "Opioid Related": false, "Cold Related": false, "Heat Related": false, "Commissioner District": 11.0, "Incident Address": "7109 WEST 82ND PLACE", "Incident City": "BURBANK", "Incident Zip Code": "60459", "longitude": -87.798, "latitude": 41.742, "location": "(41.74153385452026, -87.79755749632268)", "Residence City": "Burbank", "Residence Zip": 60459.0, "OBJECTID": 10426, "Chicago Ward": null, "Chicago Community Area": null}, {"Case Number": "ME2018-05182", "Date of Incident": "10/31/2018 09:21:00 PM", "Date of Death": "10/31/2018 10:00:00 PM", "Age": 62.0, "Gender": "Male", "Race": "White", "Latino": false, "Manner of Death": "ACCIDENT", "Primary Cause": "COMBINED DRUG (COCAINE AND FENTANYL) TOXICITY", "Primary Cause Line A": null, "Primary Cause Line B": null, "Primary Cause Line C": null, "Secondary Cause": null, "Gun Related": false, "Opioid Related": true, "Cold Related": false, "Heat Related": false, "Commissioner District": 12.0, "Incident Address": "2600 N. Southport ( Apt 402)", "Incident City": "CHICAGO", "Incident Zip Code": "60614", "longitude": -87.664, "latitude": 41.929, "location": "(41.929089306754584, -87.66375179789118)", "Residence City": "Chicago", "Residence Zip": 60614.0, "OBJECTID": 14722, "Chicago Ward": 32.0, "Chicago Community Area": "LINCOLN PARK"}, {"Case Number": "ME2017-05493", "Date of Incident": "11/23/2017 01:35:00 PM", "Date of Death": "11/23/2017 02:04:00 PM", "Age": 57.0, "Gender": "Male", "Race": "White", "Latino": false, "Manner of Death": "ACCIDENT", "Primary Cause": "HEROIN TOXICITY", "Primary Cause Line A": null, "Primary Cause Line B": null, "Primary Cause Line C": null, "Secondary Cause": null, "Gun Related": false, "Opioid Related": true, "Cold Related": false, "Heat Related": false, "Commissioner District": 17.0, "Incident Address": "1960 SOUTH MOUNT PROSPECT ROAD", "Incident City": "DES PLAINES", "Incident Zip Code": "60018", "longitude": -87.925, "latitude": 42.016, "location": "(42.01551406096016, -87.92544322367895)", "Residence City": "Lonsdale", "Residence Zip": 55046.0, "OBJECTID": 6541, "Chicago Ward": null, "Chicago Community Area": null}]], "questions": [{"desc": "calculate the mean of gdp", "code": "df.gdp.mean()", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows  where life_expectancy is greater than or equal to 75.9 and population is less than 6889000.0 and gdp is greater than 69539440000.00002", "code": "df[(df.life_expectancy >= 75.9) & (df.population < 6889000.0) & (df.gdp > 69539440000.00002)]", "difficulty": 3, "dataset_id": 0}, {"desc": "count the frequency of each value of continent (including missing values)  where population is greater than 2339020.0000000005", "code": "df[df.population > 2339020.0000000005].continent.value_counts(dropna=False)", "difficulty": 2, "dataset_id": 0}, {"desc": "calculate the sum of life_expectancy where population is less than or equal to 4107000", "code": "df[df.population <= 4107000].life_expectancy.sum()", "difficulty": 2, "dataset_id": 0}, {"desc": "calculate the mean of gdp where population is less than 22185250.0", "code": "df[df.population < 22185250.0].gdp.mean()", "difficulty": 2, "dataset_id": 0}, {"desc": "count the frequency of each value of continent where life_expectancy is less than 62.1", "code": "df[df.life_expectancy < 62.1].continent.value_counts()", "difficulty": 2, "dataset_id": 0}, {"desc": "calculate the mean of gdp where life_expectancy is greater than 70.324", "code": "df[df.life_expectancy > 70.324].gdp.mean()", "difficulty": 2, "dataset_id": 0}, {"desc": "display all rows  where life_expectancy is less than 70.9", "code": "df[df.life_expectancy < 70.9]", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows  where life_expectancy is greater than or equal to 77.7", "code": "df[df.life_expectancy >= 77.7]", "difficulty": 1, "dataset_id": 0}, {"desc": "calculate the median of gdp where life_expectancy is less than 62.997 and population is greater than 11234440.0", "code": "df[(df.life_expectancy < 62.997) & (df.population > 11234440.0)].gdp.median()", "difficulty": 3, "dataset_id": 0}, {"desc": "display all rows  where population is less than 18958689.999999996 and life_expectancy is less than or equal to 70.8 and gdp is less than 8213590000.000001", "code": "df[(df.population < 18958689.999999996) & (df.life_expectancy <= 70.8) & (df.gdp < 8213590000.000001)]", "difficulty": 3, "dataset_id": 0}, {"desc": "calculate the mean of population", "code": "df.population.mean()", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows  where gdp is less than 9394979999.999998", "code": "df[df.gdp < 9394979999.999998]", "difficulty": 1, "dataset_id": 0}, {"desc": "count the frequency of each value of continent where population is greater than or equal to 268000 and gdp is greater than 10970430000.0", "code": "df[(df.population >= 268000) & (df.gdp > 10970430000.0)].continent.value_counts()", "difficulty": 3, "dataset_id": 0}, {"desc": "display all rows  where gdp is equal to 14363000000", "code": "df[df.gdp == 14363000000]", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows  where life_expectancy is greater than 73.2 and gdp is greater than or equal to 4266000000 and population is greater than or equal to 7168000", "code": "df[(df.life_expectancy > 73.2) & (df.gdp >= 4266000000) & (df.population >= 7168000)]", "difficulty": 3, "dataset_id": 0}, {"desc": "count the frequency of each value of continent where life_expectancy is greater than or equal to 63.9", "code": "df[df.life_expectancy >= 63.9].continent.value_counts()", "difficulty": 2, "dataset_id": 0}, {"desc": "calculate the mean of gdp where life_expectancy is greater than 71.033", "code": "df[df.life_expectancy > 71.033].gdp.mean()", "difficulty": 2, "dataset_id": 0}, {"desc": "calculate the median of population", "code": "df.population.median()", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows", "code": "df", "difficulty": 0, "dataset_id": 0}, {"desc": "calculate the sum of population where life_expectancy is less than or equal to 74.5", "code": "df[df.life_expectancy <= 74.5].population.sum()", "difficulty": 2, "dataset_id": 0}, {"desc": "display all rows  where population is less than 6889000.0", "code": "df[df.population < 6889000.0]", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows  where life_expectancy is less than 62.036 and gdp is less than or equal to 46486000000", "code": "df[(df.life_expectancy < 62.036) & (df.gdp <= 46486000000)]", "difficulty": 2, "dataset_id": 0}, {"desc": "display all rows", "code": "df", "difficulty": 0, "dataset_id": 0}, {"desc": "display all rows  where gdp is greater than 11969320000.000004", "code": "df[df.gdp > 11969320000.000004]", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows  where gdp is less than 47800200000.0 and population is equal to 59048000", "code": "df[(df.gdp < 47800200000.0) & (df.population == 59048000)]", "difficulty": 2, "dataset_id": 0}, {"desc": "display all rows  where gdp is less than or equal to 88482000000", "code": "df[df.gdp <= 88482000000]", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows  where life_expectancy is less than 70.05", "code": "df[df.life_expectancy < 70.05]", "difficulty": 1, "dataset_id": 0}, {"desc": "calculate the median of population where life_expectancy is equal to 74.1 and gdp is less than 88081000000.00002", "code": "df[(df.life_expectancy == 74.1) & (df.gdp < 88081000000.00002)].population.median()", "difficulty": 3, "dataset_id": 0}, {"desc": "count the frequency of each value of continent", "code": "df.continent.value_counts()", "difficulty": 1, "dataset_id": 0}, {"desc": "calculate the sum of gdp where population is greater than or equal to 10134000", "code": "df[df.population >= 10134000].gdp.sum()", "difficulty": 2, "dataset_id": 0}, {"desc": "calculate the sum of population where gdp is greater than or equal to 160906000000", "code": "df[df.gdp >= 160906000000].population.sum()", "difficulty": 2, "dataset_id": 0}, {"desc": "calculate the sum of population where gdp is greater than 51656600000.0", "code": "df[df.gdp > 51656600000.0].population.sum()", "difficulty": 2, "dataset_id": 0}, {"desc": "count the frequency of each value of continent where gdp is less than or equal to 28952000000", "code": "df[df.gdp <= 28952000000].continent.value_counts()", "difficulty": 2, "dataset_id": 0}, {"desc": "display all rows", "code": "df", "difficulty": 0, "dataset_id": 0}, {"desc": "calculate the median of life_expectancy", "code": "df.life_expectancy.median()", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows  where gdp is greater than or equal to 160906000000", "code": "df[df.gdp >= 160906000000]", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows  where life_expectancy is greater than 62.997", "code": "df[df.life_expectancy > 62.997]", "difficulty": 1, "dataset_id": 0}, {"desc": "calculate the sum of population where gdp is less than 36684149999.999985", "code": "df[df.gdp < 36684149999.999985].population.sum()", "difficulty": 2, "dataset_id": 0}, {"desc": "display all rows  where population is greater than or equal to 4794000", "code": "df[df.population >= 4794000]", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows  where life_expectancy is equal to 70.5 and population is equal to 3668000", "code": "df[(df.life_expectancy == 70.5) & (df.population == 3668000)]", "difficulty": 2, "dataset_id": 0}, {"desc": "display all rows  where population is greater than or equal to 141000", "code": "df[df.population >= 141000]", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows  where gdp is greater than or equal to 33709000000 and population is less than or equal to 11229000 and life_expectancy is equal to 71.5", "code": "df[(df.gdp >= 33709000000) & (df.population <= 11229000) & (df.life_expectancy == 71.5)]", "difficulty": 3, "dataset_id": 0}, {"desc": "display all rows  where gdp is greater than 88081000000.00002", "code": "df[df.gdp > 88081000000.00002]", "difficulty": 1, "dataset_id": 0}, {"desc": "calculate the mean of gdp where life_expectancy is equal to 79.3", "code": "df[df.life_expectancy == 79.3].gdp.mean()", "difficulty": 2, "dataset_id": 0}, {"desc": "display all rows  where population is less than or equal to 10243000", "code": "df[df.population <= 10243000]", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows  where population is less than 19499399.999999996", "code": "df[df.population < 19499399.999999996]", "difficulty": 1, "dataset_id": 0}, {"desc": "calculate the mean of population where life_expectancy is greater than 73.65299999999999", "code": "df[df.life_expectancy > 73.65299999999999].population.mean()", "difficulty": 2, "dataset_id": 0}, {"desc": "display all rows  where population is greater than 6207200.0", "code": "df[df.population > 6207200.0]", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows  where life_expectancy is less than 61.037000000000006 and population is less than 8630160.0", "code": "df[(df.life_expectancy < 61.037000000000006) & (df.population < 8630160.0)]", "difficulty": 2, "dataset_id": 0}, {"desc": "display all rows  where gdp is greater than or equal to 2303000000", "code": "df[df.gdp >= 2303000000]", "difficulty": 1, "dataset_id": 0}, {"desc": "count the frequency of each value of continent (as a percent)  where population is equal to 4827000", "code": "df[df.population == 4827000].continent.value_counts(normalize=True)", "difficulty": 2, "dataset_id": 0}, {"desc": "calculate the median of life_expectancy where population is equal to 6218000", "code": "df[df.population == 6218000].life_expectancy.median()", "difficulty": 2, "dataset_id": 0}, {"desc": "count the frequency of each value of continent (including missing values)  where population is greater than 5349250.0 and gdp is equal to 938000000", "code": "df[(df.population > 5349250.0) & (df.gdp == 938000000)].continent.value_counts(dropna=False)", "difficulty": 3, "dataset_id": 0}, {"desc": "count the frequency of each value of continent where gdp is less than or equal to 91041000000", "code": "df[df.gdp <= 91041000000].continent.value_counts()", "difficulty": 2, "dataset_id": 0}, {"desc": "display all rows  where population is less than 10203800.0", "code": "df[df.population < 10203800.0]", "difficulty": 1, "dataset_id": 0}, {"desc": "calculate the mean of gdp", "code": "df.gdp.mean()", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows  where life_expectancy is less than 73.65299999999999 and population is greater than 9211639.999999994", "code": "df[(df.life_expectancy < 73.65299999999999) & (df.population > 9211639.999999994)]", "difficulty": 2, "dataset_id": 0}, {"desc": "display all rows  where life_expectancy is equal to 79.2 and gdp is less than 8599640000.000002 and population is equal to 6783000", "code": "df[(df.life_expectancy == 79.2) & (df.gdp < 8599640000.000002) & (df.population == 6783000)]", "difficulty": 3, "dataset_id": 0}, {"desc": "display all rows  where population is less than 15022120.000000004", "code": "df[df.population < 15022120.000000004]", "difficulty": 1, "dataset_id": 0}, {"desc": "calculate the sum of life_expectancy where gdp is equal to 6503000000", "code": "df[df.gdp == 6503000000].life_expectancy.sum()", "difficulty": 2, "dataset_id": 0}, {"desc": "display all rows  where gdp is greater than 29074760000.0 and life_expectancy is greater than or equal to 77.4", "code": "df[(df.gdp > 29074760000.0) & (df.life_expectancy >= 77.4)]", "difficulty": 2, "dataset_id": 0}, {"desc": "display all rows  where population is less than 3877519.9999999995", "code": "df[df.population < 3877519.9999999995]", "difficulty": 1, "dataset_id": 0}, {"desc": "calculate the mean of population where gdp is equal to 1736824000000", "code": "df[df.gdp == 1736824000000].population.mean()", "difficulty": 2, "dataset_id": 0}, {"desc": "display all rows  where life_expectancy is less than or equal to 43.7", "code": "df[df.life_expectancy <= 43.7]", "difficulty": 1, "dataset_id": 0}, {"desc": "count the frequency of each value of continent (as a percent)", "code": "df.continent.value_counts(normalize=True)", "difficulty": 1, "dataset_id": 0}, {"desc": "count the frequency of each value of continent where gdp is equal to 14491000000 and population is equal to 15364000", "code": "df[(df.gdp == 14491000000) & (df.population == 15364000)].continent.value_counts()", "difficulty": 3, "dataset_id": 0}, {"desc": "count the frequency of each value of continent (including missing values)  where population is greater than or equal to 78758000 and life_expectancy is greater than 59.650000000000006", "code": "df[(df.population >= 78758000) & (df.life_expectancy > 59.650000000000006)].continent.value_counts(dropna=False)", "difficulty": 3, "dataset_id": 0}, {"desc": "display all rows", "code": "df", "difficulty": 0, "dataset_id": 0}, {"desc": "display all rows  where population is greater than 4816110.0 and life_expectancy is less than or equal to 48.3 and gdp is less than or equal to 479000000", "code": "df[(df.population > 4816110.0) & (df.life_expectancy <= 48.3) & (df.gdp <= 479000000)]", "difficulty": 3, "dataset_id": 0}, {"desc": "display all rows", "code": "df", "difficulty": 0, "dataset_id": 0}, {"desc": "calculate the median of gdp", "code": "df.gdp.median()", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows  where gdp is equal to 8058000000", "code": "df[df.gdp == 8058000000]", "difficulty": 1, "dataset_id": 0}, {"desc": "calculate the sum of life_expectancy where gdp is greater than or equal to 14050000000", "code": "df[df.gdp >= 14050000000].life_expectancy.sum()", "difficulty": 2, "dataset_id": 0}, {"desc": "display all rows  where life_expectancy is less than 67.841 and population is equal to 3136000", "code": "df[(df.life_expectancy < 67.841) & (df.population == 3136000)]", "difficulty": 2, "dataset_id": 0}, {"desc": "display all rows  where gdp is less than or equal to 19233000000", "code": "df[df.gdp <= 19233000000]", "difficulty": 1, "dataset_id": 0}, {"desc": "calculate the sum of life_expectancy where population is equal to 82349000", "code": "df[df.population == 82349000].life_expectancy.sum()", "difficulty": 2, "dataset_id": 0}, {"desc": "calculate the mean of life_expectancy where gdp is greater than 30174820000.0", "code": "df[df.gdp > 30174820000.0].life_expectancy.mean()", "difficulty": 2, "dataset_id": 0}, {"desc": "display all rows  where gdp is greater than or equal to 12306000000 and life_expectancy is greater than or equal to 81.4 and population is less than 4697999.999999999", "code": "df[(df.gdp >= 12306000000) & (df.life_expectancy >= 81.4) & (df.population < 4697999.999999999)]", "difficulty": 3, "dataset_id": 0}, {"desc": "display all rows  where gdp is greater than 14482040000.0", "code": "df[df.gdp > 14482040000.0]", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows  where gdp is greater than or equal to 301473000000", "code": "df[df.gdp >= 301473000000]", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows  where population is greater than or equal to 125720000", "code": "df[df.population >= 125720000]", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows  where gdp is less than or equal to 28952000000 and population is less than or equal to 591000", "code": "df[(df.gdp <= 28952000000) & (df.population <= 591000)]", "difficulty": 2, "dataset_id": 0}, {"desc": "calculate the sum of population where gdp is less than or equal to 15154000000", "code": "df[df.gdp <= 15154000000].population.sum()", "difficulty": 2, "dataset_id": 0}, {"desc": "calculate the median of life_expectancy where gdp is less than 15607970000.0 and population is less than 15022120.000000004", "code": "df[(df.gdp < 15607970000.0) & (df.population < 15022120.000000004)].life_expectancy.median()", "difficulty": 3, "dataset_id": 0}, {"desc": "calculate the median of gdp where population is equal to 10058000 and life_expectancy is equal to 73.8", "code": "df[(df.population == 10058000) & (df.life_expectancy == 73.8)].gdp.median()", "difficulty": 3, "dataset_id": 0}, {"desc": "display all rows  where life_expectancy is greater than 73.19", "code": "df[df.life_expectancy > 73.19]", "difficulty": 1, "dataset_id": 0}, {"desc": "calculate the mean of gdp where population is greater than or equal to 8098000", "code": "df[df.population >= 8098000].gdp.mean()", "difficulty": 2, "dataset_id": 0}, {"desc": "display all rows  where population is less than 12387840.0", "code": "df[df.population < 12387840.0]", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows", "code": "df", "difficulty": 0, "dataset_id": 0}, {"desc": "display all rows  where gdp is less than 21480200000.0 and life_expectancy is equal to 55.1 and population is greater than or equal to 63155000", "code": "df[(df.gdp < 21480200000.0) & (df.life_expectancy == 55.1) & (df.population >= 63155000)]", "difficulty": 3, "dataset_id": 0}, {"desc": "calculate the mean of life_expectancy", "code": "df.life_expectancy.mean()", "difficulty": 1, "dataset_id": 0}, {"desc": "count the frequency of each value of continent where life_expectancy is greater than or equal to 75.1", "code": "df[df.life_expectancy >= 75.1].continent.value_counts()", "difficulty": 2, "dataset_id": 0}, {"desc": "calculate the median of population where life_expectancy is equal to 76.1", "code": "df[df.life_expectancy == 76.1].population.median()", "difficulty": 2, "dataset_id": 0}, {"desc": "calculate the mean of population where gdp is greater than 14482040000.0", "code": "df[df.gdp > 14482040000.0].population.mean()", "difficulty": 2, "dataset_id": 0}, {"desc": "calculate the mean of gdp where life_expectancy is greater than 62.036", "code": "df[df.life_expectancy > 62.036].gdp.mean()", "difficulty": 2, "dataset_id": 0}, {"desc": "count the frequency of each value of continent where gdp is less than or equal to 2142000000 and population is greater than or equal to 2582000", "code": "df[(df.gdp <= 2142000000) & (df.population >= 2582000)].continent.value_counts()", "difficulty": 3, "dataset_id": 0}, {"desc": "display all rows  where life_expectancy is greater than or equal to 77.0", "code": "df[df.life_expectancy >= 77.0]", "difficulty": 1, "dataset_id": 0}, {"desc": "calculate the median of population", "code": "df.population.median()", "difficulty": 1, "dataset_id": 0}, {"desc": "calculate the median of gdp", "code": "df.gdp.median()", "difficulty": 1, "dataset_id": 0}, {"desc": "display all rows  where liborRate is missing", "code": "df[df.liborRate.isna()]", "difficulty": 1, "dataset_id": 1}, {"desc": "display all rows  where repayment is greater than or equal to 8.0 and year is equal to 2013", "code": "df[(df.repayment >= 8.0) & (df.year == 2013)]", "difficulty": 2, "dataset_id": 1}, {"desc": "calculate the sum of reportedValue where term is not missing and cleanUSD is less than or equal to 244 and group is less than or equal to 1.0", "code": "df[df.term.notna() & (df.cleanUSD <= 244) & (df.group <= 1.0)].reportedValue.sum()", "difficulty": 4, "dataset_id": 1}, {"desc": "display all rows  where liborRate is not missing", "code": "df[df.liborRate.notna()]", "difficulty": 1, "dataset_id": 1}, {"desc": "display all rows", "code": "df", "difficulty": 0, "dataset_id": 1}, {"desc": "display the top 4 most common values in liborRate, including missing values where group is less than 1.0 and interestRate is not missing", "code": "df[(df.group < 1.0) & df.interestRate.notna()].liborRate.value_counts(dropna=False).head(4)", "difficulty": 3, "dataset_id": 1}, {"desc": "display all rows  where term is not missing", "code": "df[df.term.notna()]", "difficulty": 1, "dataset_id": 1}, {"desc": "display all rows  where borrowerCode is not missing", "code": "df[df.borrowerCode.notna()]", "difficulty": 1, "dataset_id": 1}, {"desc": "count the frequency of each value of reportedUnit (as a percent, including missing values)  where year is greater than or equal to 2012 for each value of liborRate,", "code": "df[df.year >= 2012].groupby('liborRate').reportedUnit.value_counts(normalize=True, dropna=False)", "difficulty": 3, "dataset_id": 1}, {"desc": "display the top 8 most common values in liborRate where grace is not missing and term is not missing", "code": "df[df.grace.notna() & df.term.notna()].liborRate.value_counts().head(8)", "difficulty": 3, "dataset_id": 1}, {"desc": "calculate the mean of reportedValue where cleanUSD is less than 20.0 for each value of liborRate,", "code": "df[df.cleanUSD < 20.0].groupby('liborRate').reportedValue.mean()", "difficulty": 3, "dataset_id": 1}, {"desc": "display the top 9 most common values in liborRate where borrowerType is not missing", "code": "df[df.borrowerType.notna()].liborRate.value_counts().head(9)", "difficulty": 2, "dataset_id": 1}, {"desc": "calculate the sum of cleanUSD where reportedValue is greater than or equal to 45 and year is equal to 2009 and group is greater than or equal to 1.0 for each value of liborRate,", "code": "df[(df.reportedValue >= 45) & (df.year == 2009) & (df.group >= 1.0)].groupby('liborRate').cleanUSD.sum()", "difficulty": 5, "dataset_id": 1}, {"desc": "display all rows  where borrowerCode is less than or equal to 7.0", "code": "df[df.borrowerCode <= 7.0]", "difficulty": 1, "dataset_id": 1}, {"desc": "count the frequency of each value of financier where repayment is greater than or equal to 13.0 and borrowerCode is greater than or equal to 2.0 and group is greater than 1.0", "code": "df[(df.repayment >= 13.0) & (df.borrowerCode >= 2.0) & (df.group > 1.0)].financier.value_counts()", "difficulty": 4, "dataset_id": 1}, {"desc": "calculate the mean of cleanUSD where borrowerCode is less than 2.0 and liborRate is not missing", "code": "df[(df.borrowerCode < 2.0) & df.liborRate.notna()].cleanUSD.mean()", "difficulty": 3, "dataset_id": 1}, {"desc": "display all rows  where cleanUSD is greater than or equal to 920", "code": "df[df.cleanUSD >= 920]", "difficulty": 1, "dataset_id": 1}, {"desc": "count the frequency of each value of country where grace is equal to 10.0 and group is greater than 1.0", "code": "df[(df.grace == 10.0) & (df.group > 1.0)].country.value_counts()", "difficulty": 3, "dataset_id": 1}, {"desc": "calculate the median of cleanUSD where borrowerCode is equal to 6.0 and repayment is not missing for each value of liborRate,", "code": "df[(df.borrowerCode == 6.0) & df.repayment.notna()].groupby('liborRate').cleanUSD.median()", "difficulty": 4, "dataset_id": 1}, {"desc": "display all rows  where group is less than or equal to 2.0 and grace is not missing", "code": "df[(df.group <= 2.0) & df.grace.notna()]", "difficulty": 2, "dataset_id": 1}, {"desc": "display the top 3 most common values in liborRate, including missing values where borrowerType is not missing and borrowerCode is greater than or equal to 6.0", "code": "df[df.borrowerType.notna() & (df.borrowerCode >= 6.0)].liborRate.value_counts(dropna=False).head(3)", "difficulty": 3, "dataset_id": 1}, {"desc": "display the top 6 most common values in liborRate where repayment is not missing", "code": "df[df.repayment.notna()].liborRate.value_counts().head(6)", "difficulty": 2, "dataset_id": 1}, {"desc": "display all rows  where liborRate is not missing", "code": "df[df.liborRate.notna()]", "difficulty": 1, "dataset_id": 1}, {"desc": "count the frequency of each value of term for each value of liborRate,", "code": "df.groupby('liborRate').term.value_counts()", "difficulty": 2, "dataset_id": 1}, {"desc": "display all rows  where grace is missing and term is not missing", "code": "df[df.grace.isna() & df.term.notna()]", "difficulty": 2, "dataset_id": 1}, {"desc": "display all rows  where group is equal to 1.0", "code": "df[df.group == 1.0]", "difficulty": 1, "dataset_id": 1}, {"desc": "display all rows  where group is greater than 1.0", "code": "df[df.group > 1.0]", "difficulty": 1, "dataset_id": 1}, {"desc": "display all rows  where grace is not missing and liborRate is not missing", "code": "df[df.grace.notna() & df.liborRate.notna()]", "difficulty": 2, "dataset_id": 1}, {"desc": "display all rows  where reportedValue is greater than 106.81999999999994", "code": "df[df.reportedValue > 106.81999999999994]", "difficulty": 1, "dataset_id": 1}, {"desc": "display all rows  where grace is equal to 0.0", "code": "df[df.grace == 0.0]", "difficulty": 1, "dataset_id": 1}, {"desc": "display all rows  where year is equal to 2016", "code": "df[df.year == 2016]", "difficulty": 1, "dataset_id": 1}, {"desc": "calculate the mean of cleanUSD where borrowerCode is not missing for each value of liborRate,", "code": "df[df.borrowerCode.notna()].groupby('liborRate').cleanUSD.mean()", "difficulty": 3, "dataset_id": 1}, {"desc": "calculate the mean of cleanUSD where borrowerType is missing", "code": "df[df.borrowerType.isna()].cleanUSD.mean()", "difficulty": 2, "dataset_id": 1}, {"desc": "calculate the mean of reportedValue where liborRate is missing and borrowerType is missing", "code": "df[df.liborRate.isna() & df.borrowerType.isna()].reportedValue.mean()", "difficulty": 3, "dataset_id": 1}, {"desc": "display all rows  where term is not missing", "code": "df[df.term.notna()]", "difficulty": 1, "dataset_id": 1}, {"desc": "calculate the sum of cleanUSD where group is equal to 1.0", "code": "df[df.group == 1.0].cleanUSD.sum()", "difficulty": 2, "dataset_id": 1}, {"desc": "display all rows  where liborRate is not missing and year is less than 2014.0", "code": "df[df.liborRate.notna() & (df.year < 2014.0)]", "difficulty": 2, "dataset_id": 1}, {"desc": "display all rows  where year is greater than or equal to 2019", "code": "df[df.year >= 2019]", "difficulty": 1, "dataset_id": 1}, {"desc": "count the frequency of each value of reportedUnit (as a percent)  where repayment is less than or equal to 10.0", "code": "df[df.repayment <= 10.0].reportedUnit.value_counts(normalize=True)", "difficulty": 2, "dataset_id": 1}, {"desc": "display all rows  where borrowerCode is missing", "code": "df[df.borrowerCode.isna()]", "difficulty": 1, "dataset_id": 1}, {"desc": "display the top 8 most common values in liborRate, including missing values for each value of liborRate,", "code": "df.groupby('liborRate').liborRate.value_counts(dropna=False).head(8)", "difficulty": 2, "dataset_id": 1}, {"desc": "display all rows  where repayment is less than 10.0 and liborRate is not missing and grace is less than or equal to 7.0", "code": "df[(df.repayment < 10.0) & df.liborRate.notna() & (df.grace <= 7.0)]", "difficulty": 3, "dataset_id": 1}, {"desc": "display all rows", "code": "df", "difficulty": 0, "dataset_id": 1}, {"desc": "display all rows  where grace is equal to 4.5", "code": "df[df.grace == 4.5]", "difficulty": 1, "dataset_id": 1}, {"desc": "display the top 4 most common values in liborRate where year is less than 2014.0 for each value of liborRate,", "code": "df[df.year < 2014.0].groupby('liborRate').liborRate.value_counts().head(4)", "difficulty": 3, "dataset_id": 1}, {"desc": "display the top 7 most common values in liborRate where grace is less than or equal to 9.0 and interestRate is not missing", "code": "df[(df.grace <= 9.0) & df.interestRate.notna()].liborRate.value_counts().head(7)", "difficulty": 3, "dataset_id": 1}, {"desc": "display all rows  where repayment is not missing", "code": "df[df.repayment.notna()]", "difficulty": 1, "dataset_id": 1}, {"desc": "display the top 6 most common values in liborRate where reportedValue is equal to 337", "code": "df[df.reportedValue == 337].liborRate.value_counts().head(6)", "difficulty": 2, "dataset_id": 1}, {"desc": "count the frequency of each value of borrowerNotGouv where grace is greater than or equal to 3.0", "code": "df[df.grace >= 3.0].borrowerNotGouv.value_counts()", "difficulty": 2, "dataset_id": 1}, {"desc": "display all rows  where year is greater than or equal to 2015", "code": "df[df.year >= 2015]", "difficulty": 1, "dataset_id": 1}, {"desc": "calculate the mean of reportedValue where liborRate is not missing and borrowerType is missing and group is greater than or equal to 1.0", "code": "df[df.liborRate.notna() & df.borrowerType.isna() & (df.group >= 1.0)].reportedValue.mean()", "difficulty": 4, "dataset_id": 1}, {"desc": "count the frequency of each value of reportedUnit (including missing values)  where grace is greater than or equal to 6.0", "code": "df[df.grace >= 6.0].reportedUnit.value_counts(dropna=False)", "difficulty": 2, "dataset_id": 1}, {"desc": "count the frequency of each value of term", "code": "df.term.value_counts()", "difficulty": 1, "dataset_id": 1}, {"desc": "display all rows", "code": "df", "difficulty": 0, "dataset_id": 1}, {"desc": "calculate the sum of cleanUSD where borrowerCode is not missing", "code": "df[df.borrowerCode.notna()].cleanUSD.sum()", "difficulty": 2, "dataset_id": 1}, {"desc": "display all rows  where cleanUSD is greater than 47.0 and group is greater than or equal to 2.0", "code": "df[(df.cleanUSD > 47.0) & (df.group >= 2.0)]", "difficulty": 2, "dataset_id": 1}, {"desc": "count the frequency of each value of term (including missing values)  where cleanUSD is equal to 49 and borrowerCode is not missing and borrowerType is missing for each value of liborRate,", "code": "df[(df.cleanUSD == 49) & df.borrowerCode.notna() & df.borrowerType.isna()].groupby('liborRate').term.value_counts(dropna=False)", "difficulty": 5, "dataset_id": 1}, {"desc": "display all rows  where borrowerCode is equal to 7.0", "code": "df[df.borrowerCode == 7.0]", "difficulty": 1, "dataset_id": 1}, {"desc": "calculate the median of reportedValue where repayment is not missing and liborRate is missing and grace is equal to 5.5", "code": "df[df.repayment.notna() & df.liborRate.isna() & (df.grace == 5.5)].reportedValue.median()", "difficulty": 4, "dataset_id": 1}, {"desc": "display all rows  where borrowerCode is less than 2.0", "code": "df[df.borrowerCode < 2.0]", "difficulty": 1, "dataset_id": 1}, {"desc": "display the top 10 most common values in liborRate where term is missing and grace is missing for each value of liborRate,", "code": "df[df.term.isna() & df.grace.isna()].groupby('liborRate').liborRate.value_counts().head(10)", "difficulty": 4, "dataset_id": 1}, {"desc": "calculate the mean of reportedValue where cleanUSD is greater than or equal to 17 for each value of liborRate,", "code": "df[df.cleanUSD >= 17].groupby('liborRate').reportedValue.mean()", "difficulty": 3, "dataset_id": 1}, {"desc": "calculate the sum of cleanUSD where group is less than 1.0 and reportedValue is less than or equal to 249 and repayment is not missing", "code": "df[(df.group < 1.0) & (df.reportedValue <= 249) & df.repayment.notna()].cleanUSD.sum()", "difficulty": 4, "dataset_id": 1}, {"desc": "display all rows  where repayment is less than 10.0", "code": "df[df.repayment < 10.0]", "difficulty": 1, "dataset_id": 1}, {"desc": "display the top 4 most common values in liborRate where reportedValue is greater than or equal to 168", "code": "df[df.reportedValue >= 168].liborRate.value_counts().head(4)", "difficulty": 2, "dataset_id": 1}, {"desc": "display the top 3 most common values in liborRate", "code": "df.liborRate.value_counts().head(3)", "difficulty": 1, "dataset_id": 1}, {"desc": "display the top 10 most common values in liborRate, including missing values", "code": "df.liborRate.value_counts(dropna=False).head(10)", "difficulty": 1, "dataset_id": 1}, {"desc": "calculate the sum of reportedValue where borrowerCode is not missing", "code": "df[df.borrowerCode.notna()].reportedValue.sum()", "difficulty": 2, "dataset_id": 1}, {"desc": "display all rows  where group is less than or equal to 2.0 and grace is less than 5.0", "code": "df[(df.group <= 2.0) & (df.grace < 5.0)]", "difficulty": 2, "dataset_id": 1}, {"desc": "calculate the mean of cleanUSD", "code": "df.cleanUSD.mean()", "difficulty": 1, "dataset_id": 1}, {"desc": "display all rows  where borrowerType is not missing and year is less than 2011.0 and liborRate is not missing", "code": "df[df.borrowerType.notna() & (df.year < 2011.0) & df.liborRate.notna()]", "difficulty": 3, "dataset_id": 1}, {"desc": "display all rows  where liborRate is not missing and cleanUSD is less than 120.0", "code": "df[df.liborRate.notna() & (df.cleanUSD < 120.0)]", "difficulty": 2, "dataset_id": 1}, {"desc": "display the top 3 most common values in liborRate where interestRate is not missing", "code": "df[df.interestRate.notna()].liborRate.value_counts().head(3)", "difficulty": 2, "dataset_id": 1}, {"desc": "calculate the mean of reportedValue where grace is missing", "code": "df[df.grace.isna()].reportedValue.mean()", "difficulty": 2, "dataset_id": 1}, {"desc": "display all rows  where interestRate is not missing", "code": "df[df.interestRate.notna()]", "difficulty": 1, "dataset_id": 1}, {"desc": "display all rows  where cleanUSD is less than 34.0 and term is not missing", "code": "df[(df.cleanUSD < 34.0) & df.term.notna()]", "difficulty": 2, "dataset_id": 1}, {"desc": "count the frequency of each value of interestRate where liborRate is missing", "code": "df[df.liborRate.isna()].interestRate.value_counts()", "difficulty": 2, "dataset_id": 1}, {"desc": "display the top 6 most common values in liborRate where borrowerCode is equal to 3.0", "code": "df[df.borrowerCode == 3.0].liborRate.value_counts().head(6)", "difficulty": 2, "dataset_id": 1}, {"desc": "count the frequency of each value of borrowerType (as a percent)  where repayment is less than 10.0", "code": "df[df.repayment < 10.0].borrowerType.value_counts(normalize=True)", "difficulty": 2, "dataset_id": 1}, {"desc": "display all rows  where term is not missing", "code": "df[df.term.notna()]", "difficulty": 1, "dataset_id": 1}, {"desc": "display all rows  where repayment is not missing and borrowerCode is greater than 2.0 and borrowerType is missing", "code": "df[df.repayment.notna() & (df.borrowerCode > 2.0) & df.borrowerType.isna()]", "difficulty": 3, "dataset_id": 1}, {"desc": "calculate the sum of reportedValue where interestRate is not missing and grace is less than 5.0 and group is less than or equal to 1.0", "code": "df[df.interestRate.notna() & (df.grace < 5.0) & (df.group <= 1.0)].reportedValue.sum()", "difficulty": 4, "dataset_id": 1}, {"desc": "display all rows", "code": "df", "difficulty": 0, "dataset_id": 1}, {"desc": "display all rows  where repayment is equal to 20.0 and borrowerCode is less than or equal to 6.0 and term is missing", "code": "df[(df.repayment == 20.0) & (df.borrowerCode <= 6.0) & df.term.isna()]", "difficulty": 3, "dataset_id": 1}, {"desc": "count the frequency of each value of borrowerType (as a percent, including missing values)  where borrowerCode is not missing for each value of liborRate,", "code": "df[df.borrowerCode.notna()].groupby('liborRate').borrowerType.value_counts(normalize=True, dropna=False)", "difficulty": 3, "dataset_id": 1}, {"desc": "count the frequency of each value of status", "code": "df.status.value_counts()", "difficulty": 1, "dataset_id": 1}, {"desc": "calculate the sum of cleanUSD where group is less than 1.0", "code": "df[df.group < 1.0].cleanUSD.sum()", "difficulty": 2, "dataset_id": 1}, {"desc": "display all rows  where reportedValue is equal to 11893", "code": "df[df.reportedValue == 11893]", "difficulty": 1, "dataset_id": 1}, {"desc": "display all rows  where grace is not missing", "code": "df[df.grace.notna()]", "difficulty": 1, "dataset_id": 1}, {"desc": "display all rows  where borrowerCode is not missing and cleanUSD is greater than 21.660000000000025", "code": "df[df.borrowerCode.notna() & (df.cleanUSD > 21.660000000000025)]", "difficulty": 2, "dataset_id": 1}, {"desc": "display all rows  where cleanUSD is equal to 90", "code": "df[df.cleanUSD == 90]", "difficulty": 1, "dataset_id": 1}, {"desc": "display all rows  where grace is not missing", "code": "df[df.grace.notna()]", "difficulty": 1, "dataset_id": 1}, {"desc": "display the top 5 most common values in liborRate where grace is missing", "code": "df[df.grace.isna()].liborRate.value_counts().head(5)", "difficulty": 2, "dataset_id": 1}, {"desc": "display the top 7 most common values in liborRate", "code": "df.liborRate.value_counts().head(7)", "difficulty": 1, "dataset_id": 1}, {"desc": "calculate the median of cleanUSD where repayment is missing for each value of liborRate,", "code": "df[df.repayment.isna()].groupby('liborRate').cleanUSD.median()", "difficulty": 3, "dataset_id": 1}, {"desc": "display all rows  where borrowerType is not missing", "code": "df[df.borrowerType.notna()]", "difficulty": 1, "dataset_id": 1}, {"desc": "calculate the sum of reportedValue where borrowerCode is greater than or equal to 7.0 and group is greater than or equal to 1.0 for each value of liborRate,", "code": "df[(df.borrowerCode >= 7.0) & (df.group >= 1.0)].groupby('liborRate').reportedValue.sum()", "difficulty": 4, "dataset_id": 1}, {"desc": "display all rows  where borrowerCode is not missing", "code": "df[df.borrowerCode.notna()]", "difficulty": 1, "dataset_id": 1}, {"desc": "display the top 8 most common values in liborRate, including missing values where grace is less than or equal to 3.5 and term is not missing", "code": "df[(df.grace <= 3.5) & df.term.notna()].liborRate.value_counts(dropna=False).head(8)", "difficulty": 3, "dataset_id": 1}, {"desc": "display all rows  where grace is not missing", "code": "df[df.grace.notna()]", "difficulty": 1, "dataset_id": 1}, {"desc": "calculate the sum of Age where Chicago Ward is not missing and Residence Zip is greater than 60617.0 for each value of Secondary Cause,", "code": "df[df['Chicago Ward'].notna() & (df['Residence Zip'] > 60617.0)].groupby('Secondary Cause').Age.sum()", "difficulty": 4, "dataset_id": 2}, {"desc": "calculate the mean of Age where Chicago Ward is not missing for each value of Primary Cause Line A,", "code": "df[df['Chicago Ward'].notna()].groupby('Primary Cause Line A').Age.mean()", "difficulty": 3, "dataset_id": 2}, {"desc": "count the frequency of each value of Race (including missing values)  where OBJECTID is equal to 4620 for each value of Primary Cause Line A,", "code": "df[df.OBJECTID == 4620].groupby('Primary Cause Line A').Race.value_counts(dropna=False)", "difficulty": 3, "dataset_id": 2}, {"desc": "count the frequency of each value of Incident Zip Code where Commissioner District is not missing and longitude is greater than or equal to -87.63 and location is not missing", "code": "df[df['Commissioner District'].notna() & (df.longitude >= -87.63) & df.location.notna()]['Incident Zip Code'].value_counts()", "difficulty": 4, "dataset_id": 2}, {"desc": "display all rows  where longitude is less than -87.646 and latitude is greater than or equal to 41.762", "code": "df[(df.longitude < -87.646) & (df.latitude >= 41.762)]", "difficulty": 2, "dataset_id": 2}, {"desc": "display all rows  where Age is less than or equal to 12.0", "code": "df[df.Age <= 12.0]", "difficulty": 1, "dataset_id": 2}, {"desc": "count the frequency of each value of Manner of Death (including missing values)  where Residence Zip is less than 60609.0", "code": "df[df['Residence Zip'] < 60609.0]['Manner of Death'].value_counts(dropna=False)", "difficulty": 2, "dataset_id": 2}, {"desc": "display all rows", "code": "df", "difficulty": 0, "dataset_id": 2}, {"desc": "display all rows  where longitude is less than -87.7302 and Chicago Ward is equal to 34.0", "code": "df[(df.longitude < -87.7302) & (df['Chicago Ward'] == 34.0)]", "difficulty": 2, "dataset_id": 2}, {"desc": "display all rows  where Chicago Community Area is not missing", "code": "df[df['Chicago Community Area'].notna()]", "difficulty": 1, "dataset_id": 2}, {"desc": "calculate the mean of longitude where Residence Zip is greater than or equal to 60074.0 and location is missing for each value of Primary Cause,", "code": "df[(df['Residence Zip'] >= 60074.0) & df.location.isna()].groupby('Primary Cause').longitude.mean()", "difficulty": 4, "dataset_id": 2}, {"desc": "display all rows", "code": "df", "difficulty": 0, "dataset_id": 2}, {"desc": "calculate the sum of longitude where Age is greater than or equal to 31.0", "code": "df[df.Age >= 31.0].longitude.sum()", "difficulty": 2, "dataset_id": 2}, {"desc": "display all rows  where Age is greater than or equal to 66.0", "code": "df[df.Age >= 66.0]", "difficulty": 1, "dataset_id": 2}, {"desc": "display all rows  where location is not missing and OBJECTID is greater than 12805.480000000001", "code": "df[df.location.notna() & (df.OBJECTID > 12805.480000000001)]", "difficulty": 2, "dataset_id": 2}, {"desc": "calculate the median of longitude where Residence Zip is greater than 60477.0 for each value of Primary Cause Line A,", "code": "df[df['Residence Zip'] > 60477.0].groupby('Primary Cause Line A').longitude.median()", "difficulty": 3, "dataset_id": 2}, {"desc": "count the frequency of each value of Race (including missing values)  where latitude is missing", "code": "df[df.latitude.isna()].Race.value_counts(dropna=False)", "difficulty": 2, "dataset_id": 2}, {"desc": "display all rows  where Primary Cause Line A is not missing and longitude is not missing", "code": "df[df['Primary Cause Line A'].notna() & df.longitude.notna()]", "difficulty": 2, "dataset_id": 2}, {"desc": "count the frequency of each value of Incident City (including missing values)  where Primary Cause Line A is not missing for each value of Primary Cause Line C,", "code": "df[df['Primary Cause Line A'].notna()].groupby('Primary Cause Line C')['Incident City'].value_counts(dropna=False)", "difficulty": 3, "dataset_id": 2}, {"desc": "display all rows  where longitude is equal to -87.685", "code": "df[df.longitude == -87.685]", "difficulty": 1, "dataset_id": 2}, {"desc": "display all rows  where Chicago Ward is greater than 21.0", "code": "df[df['Chicago Ward'] > 21.0]", "difficulty": 1, "dataset_id": 2}, {"desc": "calculate the sum of Age for each value of Primary Cause Line C,", "code": "df.groupby('Primary Cause Line C').Age.sum()", "difficulty": 2, "dataset_id": 2}, {"desc": "calculate the median of Age where location is not missing and Commissioner District is greater than or equal to 4.0", "code": "df[df.location.notna() & (df['Commissioner District'] >= 4.0)].Age.median()", "difficulty": 3, "dataset_id": 2}, {"desc": "count the frequency of each value of Chicago Community Area where Chicago Ward is less than 10.39 for each value of Primary Cause Line A,", "code": "df[df['Chicago Ward'] < 10.39].groupby('Primary Cause Line A')['Chicago Community Area'].value_counts()", "difficulty": 3, "dataset_id": 2}, {"desc": "count the frequency of each value of Gender where Chicago Community Area is missing and OBJECTID is greater than 6750.26 for each value of Primary Cause Line A,", "code": "df[df['Chicago Community Area'].isna() & (df.OBJECTID > 6750.26)].groupby('Primary Cause Line A').Gender.value_counts()", "difficulty": 4, "dataset_id": 2}, {"desc": "display all rows  where Chicago Community Area is missing", "code": "df[df['Chicago Community Area'].isna()]", "difficulty": 1, "dataset_id": 2}, {"desc": "calculate the sum of OBJECTID where Chicago Ward is not missing and longitude is not missing and Age is less than 44.0 for each value of Primary Cause,", "code": "df[df['Chicago Ward'].notna() & df.longitude.notna() & (df.Age < 44.0)].groupby('Primary Cause').OBJECTID.sum()", "difficulty": 5, "dataset_id": 2}, {"desc": "display all rows  where latitude is greater than or equal to 42.148", "code": "df[df.latitude >= 42.148]", "difficulty": 1, "dataset_id": 2}, {"desc": "count the frequency of each value of Opioid Related (including missing values)  where longitude is missing and Chicago Ward is greater than 18.0 for each value of Primary Cause Line C,", "code": "df[df.longitude.isna() & (df['Chicago Ward'] > 18.0)].groupby('Primary Cause Line C')['Opioid Related'].value_counts(dropna=False)", "difficulty": 4, "dataset_id": 2}, {"desc": "display all rows", "code": "df", "difficulty": 0, "dataset_id": 2}, {"desc": "calculate the sum of longitude where Commissioner District is less than or equal to 1.0 for each value of Secondary Cause,", "code": "df[df['Commissioner District'] <= 1.0].groupby('Secondary Cause').longitude.sum()", "difficulty": 3, "dataset_id": 2}, {"desc": "display all rows  where OBJECTID is greater than or equal to 11181", "code": "df[df.OBJECTID >= 11181]", "difficulty": 1, "dataset_id": 2}, {"desc": "display all rows  where Residence Zip is equal to 60153.0", "code": "df[df['Residence Zip'] == 60153.0]", "difficulty": 1, "dataset_id": 2}, {"desc": "display all rows  where OBJECTID is less than 9521.65", "code": "df[df.OBJECTID < 9521.65]", "difficulty": 1, "dataset_id": 2}, {"desc": "calculate the sum of longitude where latitude is not missing", "code": "df[df.latitude.notna()].longitude.sum()", "difficulty": 2, "dataset_id": 2}, {"desc": "calculate the sum of Age where longitude is greater than -87.682 and latitude is not missing for each value of Secondary Cause,", "code": "df[(df.longitude > -87.682) & df.latitude.notna()].groupby('Secondary Cause').Age.sum()", "difficulty": 4, "dataset_id": 2}, {"desc": "calculate the mean of latitude where Primary Cause Line A is not missing and location is not missing for each value of Primary Cause,", "code": "df[df['Primary Cause Line A'].notna() & df.location.notna()].groupby('Primary Cause').latitude.mean()", "difficulty": 4, "dataset_id": 2}, {"desc": "calculate the mean of OBJECTID where Residence Zip is greater than or equal to 60415.0", "code": "df[df['Residence Zip'] >= 60415.0].OBJECTID.mean()", "difficulty": 2, "dataset_id": 2}, {"desc": "display all rows  where Residence Zip is greater than or equal to 60107.0", "code": "df[df['Residence Zip'] >= 60107.0]", "difficulty": 1, "dataset_id": 2}, {"desc": "display all rows  where Chicago Ward is not missing", "code": "df[df['Chicago Ward'].notna()]", "difficulty": 1, "dataset_id": 2}, {"desc": "calculate the median of Age where latitude is greater than or equal to 41.929 for each value of Primary Cause Line C,", "code": "df[df.latitude >= 41.929].groupby('Primary Cause Line C').Age.median()", "difficulty": 3, "dataset_id": 2}, {"desc": "calculate the mean of Age where Commissioner District is less than or equal to 9.0 for each value of Primary Cause Line A,", "code": "df[df['Commissioner District'] <= 9.0].groupby('Primary Cause Line A').Age.mean()", "difficulty": 3, "dataset_id": 2}, {"desc": "calculate the sum of longitude where Residence Zip is equal to 60409.0", "code": "df[df['Residence Zip'] == 60409.0].longitude.sum()", "difficulty": 2, "dataset_id": 2}, {"desc": "calculate the mean of Residence Zip", "code": "df['Residence Zip'].mean()", "difficulty": 1, "dataset_id": 2}, {"desc": "calculate the mean of latitude", "code": "df.latitude.mean()", "difficulty": 1, "dataset_id": 2}, {"desc": "display all rows  where longitude is less than or equal to -87.802 and Residence Zip is equal to 60103.0", "code": "df[(df.longitude <= -87.802) & (df['Residence Zip'] == 60103.0)]", "difficulty": 2, "dataset_id": 2}, {"desc": "calculate the median of Residence Zip where Chicago Ward is not missing", "code": "df[df['Chicago Ward'].notna()]['Residence Zip'].median()", "difficulty": 2, "dataset_id": 2}, {"desc": "calculate the mean of Residence Zip where Chicago Ward is missing and Chicago Community Area is not missing and Commissioner District is not missing for each value of Primary Cause Line A,", "code": "df[df['Chicago Ward'].isna() & df['Chicago Community Area'].notna() & df['Commissioner District'].notna()].groupby('Primary Cause Line A')['Residence Zip'].mean()", "difficulty": 5, "dataset_id": 2}, {"desc": "display all rows  where longitude is less than -87.728 and location is missing", "code": "df[(df.longitude < -87.728) & df.location.isna()]", "difficulty": 2, "dataset_id": 2}, {"desc": "display all rows  where Chicago Ward is greater than or equal to 43.0 and Residence Zip is less than 60409.0 and Commissioner District is equal to 4.0", "code": "df[(df['Chicago Ward'] >= 43.0) & (df['Residence Zip'] < 60409.0) & (df['Commissioner District'] == 4.0)]", "difficulty": 3, "dataset_id": 2}, {"desc": "display the top 9 most common values in Secondary Cause where Commissioner District is less than or equal to 17.0", "code": "df[df['Commissioner District'] <= 17.0]['Secondary Cause'].value_counts().head(9)", "difficulty": 2, "dataset_id": 2}, {"desc": "display all rows  where latitude is not missing", "code": "df[df.latitude.notna()]", "difficulty": 1, "dataset_id": 2}, {"desc": "calculate the median of longitude where location is not missing and latitude is less than or equal to 41.924 for each value of Primary Cause Line A,", "code": "df[df.location.notna() & (df.latitude <= 41.924)].groupby('Primary Cause Line A').longitude.median()", "difficulty": 4, "dataset_id": 2}, {"desc": "display all rows  where Primary Cause Line A is not missing and Chicago Ward is greater than 10.0", "code": "df[df['Primary Cause Line A'].notna() & (df['Chicago Ward'] > 10.0)]", "difficulty": 2, "dataset_id": 2}, {"desc": "count the frequency of each value of Opioid Related (as a percent)  where Commissioner District is not missing and location is not missing for each value of Primary Cause,", "code": "df[df['Commissioner District'].notna() & df.location.notna()].groupby('Primary Cause')['Opioid Related'].value_counts(normalize=True)", "difficulty": 4, "dataset_id": 2}, {"desc": "display all rows  where OBJECTID is greater than 7871.800000000001", "code": "df[df.OBJECTID > 7871.800000000001]", "difficulty": 1, "dataset_id": 2}, {"desc": "display all rows  where Primary Cause Line A is not missing and latitude is not missing", "code": "df[df['Primary Cause Line A'].notna() & df.latitude.notna()]", "difficulty": 2, "dataset_id": 2}, {"desc": "calculate the median of Residence Zip where longitude is less than or equal to -87.758", "code": "df[df.longitude <= -87.758]['Residence Zip'].median()", "difficulty": 2, "dataset_id": 2}, {"desc": "calculate the mean of Age where Secondary Cause is missing for each value of Primary Cause,", "code": "df[df['Secondary Cause'].isna()].groupby('Primary Cause').Age.mean()", "difficulty": 3, "dataset_id": 2}, {"desc": "count the frequency of each value of Chicago Community Area (as a percent)  where Primary Cause Line A is not missing", "code": "df[df['Primary Cause Line A'].notna()]['Chicago Community Area'].value_counts(normalize=True)", "difficulty": 2, "dataset_id": 2}, {"desc": "display all rows  where location is not missing", "code": "df[df.location.notna()]", "difficulty": 1, "dataset_id": 2}, {"desc": "display all rows  where Residence Zip is less than 60419.0", "code": "df[df['Residence Zip'] < 60419.0]", "difficulty": 1, "dataset_id": 2}, {"desc": "display the top 6 most common values in Primary Cause where Primary Cause Line A is not missing", "code": "df[df['Primary Cause Line A'].notna()]['Primary Cause'].value_counts().head(6)", "difficulty": 2, "dataset_id": 2}, {"desc": "display all rows  where latitude is not missing", "code": "df[df.latitude.notna()]", "difficulty": 1, "dataset_id": 2}, {"desc": "calculate the mean of longitude where Chicago Ward is not missing", "code": "df[df['Chicago Ward'].notna()].longitude.mean()", "difficulty": 2, "dataset_id": 2}, {"desc": "display all rows", "code": "df", "difficulty": 0, "dataset_id": 2}, {"desc": "calculate the sum of Age where location is not missing", "code": "df[df.location.notna()].Age.sum()", "difficulty": 2, "dataset_id": 2}, {"desc": "calculate the mean of Residence Zip where Chicago Ward is not missing for each value of Primary Cause Line A,", "code": "df[df['Chicago Ward'].notna()].groupby('Primary Cause Line A')['Residence Zip'].mean()", "difficulty": 3, "dataset_id": 2}, {"desc": "display the top 3 most common values in Primary Cause where Secondary Cause is not missing and longitude is not missing and Chicago Ward is not missing", "code": "df[df['Secondary Cause'].notna() & df.longitude.notna() & df['Chicago Ward'].notna()]['Primary Cause'].value_counts().head(3)", "difficulty": 4, "dataset_id": 2}, {"desc": "display all rows  where Secondary Cause is not missing and latitude is greater than or equal to 42.118", "code": "df[df['Secondary Cause'].notna() & (df.latitude >= 42.118)]", "difficulty": 2, "dataset_id": 2}, {"desc": "calculate the sum of OBJECTID where Chicago Ward is less than 20.0 and Age is greater than or equal to 34.0 for each value of Primary Cause Line C,", "code": "df[(df['Chicago Ward'] < 20.0) & (df.Age >= 34.0)].groupby('Primary Cause Line C').OBJECTID.sum()", "difficulty": 4, "dataset_id": 2}, {"desc": "calculate the mean of Age where latitude is not missing and Commissioner District is not missing and longitude is not missing for each value of Primary Cause,", "code": "df[df.latitude.notna() & df['Commissioner District'].notna() & df.longitude.notna()].groupby('Primary Cause').Age.mean()", "difficulty": 5, "dataset_id": 2}, {"desc": "calculate the sum of OBJECTID where Commissioner District is greater than or equal to 16.0 and Chicago Community Area is not missing", "code": "df[(df['Commissioner District'] >= 16.0) & df['Chicago Community Area'].notna()].OBJECTID.sum()", "difficulty": 3, "dataset_id": 2}, {"desc": "display the top 4 most common values in Primary Cause, including missing values where Chicago Ward is less than or equal to 33.0", "code": "df[df['Chicago Ward'] <= 33.0]['Primary Cause'].value_counts(dropna=False).head(4)", "difficulty": 2, "dataset_id": 2}, {"desc": "display the top 7 most common values in Primary Cause Line A where location is not missing", "code": "df[df.location.notna()]['Primary Cause Line A'].value_counts().head(7)", "difficulty": 2, "dataset_id": 2}, {"desc": "calculate the sum of Age where OBJECTID is greater than or equal to 10432", "code": "df[df.OBJECTID >= 10432].Age.sum()", "difficulty": 2, "dataset_id": 2}, {"desc": "display all rows  where Chicago Community Area is not missing and Primary Cause Line A is not missing and location is not missing", "code": "df[df['Chicago Community Area'].notna() & df['Primary Cause Line A'].notna() & df.location.notna()]", "difficulty": 3, "dataset_id": 2}, {"desc": "count the frequency of each value of Opioid Related where Age is greater than or equal to 31.0 for each value of Secondary Cause,", "code": "df[df.Age >= 31.0].groupby('Secondary Cause')['Opioid Related'].value_counts()", "difficulty": 3, "dataset_id": 2}, {"desc": "display all rows  where Primary Cause Line A is missing and latitude is less than or equal to 41.812 and Chicago Ward is equal to 13.0", "code": "df[df['Primary Cause Line A'].isna() & (df.latitude <= 41.812) & (df['Chicago Ward'] == 13.0)]", "difficulty": 3, "dataset_id": 2}, {"desc": "display all rows  where location is not missing", "code": "df[df.location.notna()]", "difficulty": 1, "dataset_id": 2}, {"desc": "count the frequency of each value of Gender where Secondary Cause is not missing and Chicago Ward is not missing", "code": "df[df['Secondary Cause'].notna() & df['Chicago Ward'].notna()].Gender.value_counts()", "difficulty": 3, "dataset_id": 2}, {"desc": "display the top 3 most common values in Primary Cause where longitude is not missing", "code": "df[df.longitude.notna()]['Primary Cause'].value_counts().head(3)", "difficulty": 2, "dataset_id": 2}, {"desc": "display all rows  where longitude is equal to -87.63", "code": "df[df.longitude == -87.63]", "difficulty": 1, "dataset_id": 2}, {"desc": "count the frequency of each value of Opioid Related (including missing values)  where Chicago Community Area is not missing for each value of Secondary Cause,", "code": "df[df['Chicago Community Area'].notna()].groupby('Secondary Cause')['Opioid Related'].value_counts(dropna=False)", "difficulty": 3, "dataset_id": 2}, {"desc": "display the top 5 most common values in Secondary Cause where Residence Zip is equal to 46410.0 and Age is equal to 40.0 and longitude is greater than or equal to -87.631", "code": "df[(df['Residence Zip'] == 46410.0) & (df.Age == 40.0) & (df.longitude >= -87.631)]['Secondary Cause'].value_counts().head(5)", "difficulty": 4, "dataset_id": 2}, {"desc": "calculate the median of longitude where Secondary Cause is not missing and OBJECTID is less than 11540.449999999999", "code": "df[df['Secondary Cause'].notna() & (df.OBJECTID < 11540.449999999999)].longitude.median()", "difficulty": 3, "dataset_id": 2}, {"desc": "calculate the median of Residence Zip where location is not missing", "code": "df[df.location.notna()]['Residence Zip'].median()", "difficulty": 2, "dataset_id": 2}, {"desc": "count the frequency of each value of Race where Chicago Community Area is not missing", "code": "df[df['Chicago Community Area'].notna()].Race.value_counts()", "difficulty": 2, "dataset_id": 2}, {"desc": "count the frequency of each value of Gender (as a percent)  where longitude is greater than or equal to -87.672 and location is not missing", "code": "df[(df.longitude >= -87.672) & df.location.notna()].Gender.value_counts(normalize=True)", "difficulty": 3, "dataset_id": 2}, {"desc": "display the top 3 most common values in Secondary Cause, including missing values where location is not missing", "code": "df[df.location.notna()]['Secondary Cause'].value_counts(dropna=False).head(3)", "difficulty": 2, "dataset_id": 2}, {"desc": "display all rows  where longitude is less than or equal to -87.919 and Secondary Cause is not missing", "code": "df[(df.longitude <= -87.919) & df['Secondary Cause'].notna()]", "difficulty": 2, "dataset_id": 2}, {"desc": "display all rows  where longitude is missing and Chicago Community Area is not missing", "code": "df[df.longitude.isna() & df['Chicago Community Area'].notna()]", "difficulty": 2, "dataset_id": 2}, {"desc": "display the top 10 most common values in Primary Cause Line A where Age is less than or equal to 73.0 and Chicago Ward is less than or equal to 37.0 and latitude is greater than 41.887", "code": "df[(df.Age <= 73.0) & (df['Chicago Ward'] <= 37.0) & (df.latitude > 41.887)]['Primary Cause Line A'].value_counts().head(10)", "difficulty": 4, "dataset_id": 2}, {"desc": "display all rows  where latitude is missing and Age is greater than 40.0", "code": "df[df.latitude.isna() & (df.Age > 40.0)]", "difficulty": 2, "dataset_id": 2}, {"desc": "display all rows  where Chicago Community Area is missing and location is not missing and longitude is not missing", "code": "df[df['Chicago Community Area'].isna() & df.location.notna() & df.longitude.notna()]", "difficulty": 3, "dataset_id": 2}, {"desc": "calculate the mean of Residence Zip where Primary Cause Line A is not missing and Chicago Ward is greater than 15.0 for each value of Primary Cause,", "code": "df[df['Primary Cause Line A'].notna() & (df['Chicago Ward'] > 15.0)].groupby('Primary Cause')['Residence Zip'].mean()", "difficulty": 4, "dataset_id": 2}, {"desc": "count the frequency of each value of Chicago Community Area (as a percent)  where location is not missing", "code": "df[df.location.notna()]['Chicago Community Area'].value_counts(normalize=True)", "difficulty": 2, "dataset_id": 2}, {"desc": "calculate the sum of Residence Zip where Age is greater than or equal to 41.0 for each value of Primary Cause Line A,", "code": "df[df.Age >= 41.0].groupby('Primary Cause Line A')['Residence Zip'].sum()", "difficulty": 3, "dataset_id": 2}, {"desc": "count the frequency of each value of Residence City (as a percent)  where Age is greater than 60.0", "code": "df[df.Age > 60.0]['Residence City'].value_counts(normalize=True)", "difficulty": 2, "dataset_id": 2}, {"desc": "count the frequency of each value of Race where latitude is not missing", "code": "df[df.latitude.notna()].Race.value_counts()", "difficulty": 2, "dataset_id": 2}]}